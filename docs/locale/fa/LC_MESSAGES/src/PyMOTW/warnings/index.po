# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/warnings/index.rst:3
msgid "warnings -- Non-fatal alerts"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:8
msgid ""
"Deliver non-fatal alerts to the user about issues encountered when "
"running a program."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:9
msgid "2.1 and later"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:11
msgid ""
"The :mod:`warnings` module was introduced in :pep:`230` as a way to warn "
"programmers about changes in language or library features in anticipation"
" of backwards incompatible changes coming with Python 3.0. Since warnings"
" are not fatal, a program may encounter the same warn-able situation many"
" times in the course of running. The :mod:`warnings` module suppresses "
"repeated warnings from the same source to cut down on the annoyance of "
"seeing the same message over and over.  You can control the messages "
"printed on a case-by-case basis using the :option:`-W` option to the "
"interpreter or by calling functions found in :mod:`warnings` from your "
"code."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:23
msgid "Categories and Filtering"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:25
msgid ""
"Warnings are categorized using subclasses of the built-in exception class"
" :class:`Warning`. Several standard values are :ref:`described in the "
"documentation <exceptions-warning>`, and you can add your own by "
"subclassing from :class:`Warning` to create a new class."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:30
msgid ""
"Messages are filtered using settings controlled through the :option:`-W` "
"option to the interpreter. A filter consists of 5 parts, the *action*, "
"*message*, *category*, *module*, and *line number*. When a warning is "
"generated, it is compared against all of the registered filters. The "
"first filter that matches controls the action taken for the warning. If "
"no filter matches, the default action is taken."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:37
msgid "The actions understood by the filtering mechanism are:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:39
msgid "error: Turn the warning into an exception."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:40
msgid "ignore: Discard the warning."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:41
msgid "always: Always emit a warning."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:42
msgid ""
"default: Print the warning the first time it is generated from each "
"location."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:43
msgid "module: Print the warning the first time it is generated from each module."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:44
msgid "once: Print the warning the first time it is generated."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:46
msgid ""
"The *message* portion of the filter is a regular expression that is used "
"to match the warning text."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:49
msgid "The *category* is a name of an exception class, as described above."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:51
msgid ""
"The *module* contains a regular expression to be matched against the "
"module name generating the warning."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:54
msgid ""
"And the *line number* can be used to change the handling on specific "
"occurrences of a warning. Use ``0`` to have the filter apply to all "
"occurrences."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:59
msgid "Generating Warnings"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:61
msgid ""
"The simplest way to emit a warning from your own code is to just call "
":func:`warn()` with the message as an argument:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:68
msgid "Then when your program runs, the message is printed:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:85
msgid ""
"Even though the warning is printed, the default behavior is to continue "
"past the warning and run the rest of the program. We can change that "
"behavior with a filter:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:93
msgid ""
"This filter tells the warnings module to raise an exception when the "
"warning is issued."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:113
msgid ""
"We can also control the filter behavior from the command line. For "
"example, if we go back to ``warnings_warn.py`` and set the filter to "
"raise an error on :class:`UserWarning`, we see the exception:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:133
msgid ""
"Since I left the fields for *message* and *module* blank, they were "
"interpreted as matching anything."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:137
msgid "Filtering with Patterns"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:139
msgid ""
"To filter on more complex rules programmatically, use "
":func:`filterwarnings()`. For example, to filter based on the content of "
"the message text:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:147
msgid ""
"The pattern contains \"``do not``\", but the actual message uses \"``Do "
"not``\". The pattern matches because the regular expression is always "
"compiled to look for case insensitive matches."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:164
msgid "Running this source from the command line:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:170
msgid "yields:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:185
msgid ""
"The same pattern matching rules apply to the name of the source module "
"containing the warning call. To suppress all warnings from the "
"``warnings_filtering`` module:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:193
msgid ""
"Since the filter is in place, no warnings are emitted when "
"``warnings_filtering`` is imported:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:208
msgid "To suppress only the warning on line 14 of ``warnings_filtering``:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:231
msgid "Repeated Warnings"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:233
msgid ""
"By default, most types of warnings are only printed the first time they "
"occur in a given location, where location is defined as the combination "
"of module and line number."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:255
msgid ""
"The \"once\" action can be used to suppress instances of the same message"
" from different locations."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:275
msgid ""
"Similarly, \"module\" will suppress repeated messages from the same "
"module, no matter what line number."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:279
msgid "Alternate Message Delivery Functions"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:281
msgid ""
"Normally warnings are printed to :ref:`sys.stderr <sys-input-output>`. "
"You can change that behavior by replacing the :func:`showwarning()` "
"function inside the :mod:`warnings` module. For example, if you wanted "
"warnings to go to a log file instead of stderr, you could replace "
":func:`showwarning()` with a function like this:"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:291
msgid ""
"So that when :func:`warn()` is called, the warnings are emitted with the "
"rest of the log messages."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:307
msgid "Formatting"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:309
msgid ""
"If it is OK for warnings to go to stderr, but you don't like the "
"formatting, you can replace :func:`formatwarning()` instead."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:331
msgid "Stack Level in Warnings"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:333
msgid ""
"You'll notice that by default the warning message includes the source "
"line that generated it, when available. It's not all that useful to see "
"the line of code with the actual warning message, though. Instead, you "
"can tell :func:`warn()` how far up the stack it has to go to find the "
"line the called the function containing the warning. That way users of a "
"deprecated function see where the function is called, instead of the "
"implementation of the function."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:346
msgid ""
"Notice that in this example :func:`warn()` needs to go up the stack 2 "
"levels, one for itself and one for :func:`old_function()`."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:365
msgid "`warnings <http://docs.python.org/lib/module-warnings.html>`_"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:365
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:368
msgid ":pep:`230`"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:368
msgid "Warning Framework"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:370
msgid ":mod:`exceptions`"
msgstr ""

#: ../../src/PyMOTW/warnings/index.rst:371
msgid "Base classes for exceptions and warnings."
msgstr ""

