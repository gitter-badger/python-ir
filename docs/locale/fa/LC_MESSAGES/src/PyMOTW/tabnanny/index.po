# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/tabnanny/index.rst:3
msgid "tabnanny -- Indentation validator"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:8
msgid "Scan Python source code looking for suspicious indentation."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:9
msgid "2.1.3 and later"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:11
msgid ""
"Consistent use of indentation is important in a langauge like Python, "
"where white-space is significant.  The :mod:`tabnanny` module provides a "
"scanner to report on \"ambiguous\" use of indentation."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:16
msgid "Running from the Command Line"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:18
msgid ""
"The simplest way to use :mod:`tabnanny` is to run it from the command "
"line, passing the names of files to check.  If you pass directory names, "
"the directories are scanned recursively to find `.py` files to check."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:23
msgid ""
"When I ran tabnanny across the PyMOTW source code, I found one old module"
" with tabs instead of spaces::"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:29
msgid ""
"Sure enough, line 78 of `fetch_podcasts.py` had two tabs instead of 8 "
"spaces.  I didn't see this by looking at it in my editor because I have "
"my tabstops set to 4 spaces, so visually there was no difference."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:39
msgid ""
"Correcting line 78 and running tabnanny again showed another error on "
"line 79.  One last problem showed up on line 80."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:42
msgid ""
"If you want to scan files, but not see the details about the error, you "
"can use the `-q` option to suppress all information except the filename."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:51
msgid ""
"To see more information about the files being scanned, use the `-v` "
"option."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:65
msgid "Using within Your Program"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:67
msgid ""
"As soon as I discovered the mistake in my Queue example, I decided I "
"needed to add an automatic check to my PyMOTW build process.  I created a"
" ``tabcheck`` task in my ``pavement.py`` build script so I could run "
"`paver tabcheck` and scan the code I'm working on for PyMOTW.  This is "
"possible because tabnanny exposes its `check()` function as a public API."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:74
msgid ""
"Here's an example of using tabnanny that doesn't require understanding "
"Paver's task definition decorators."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:81
msgid "And in action:"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:95
msgid ""
"If you run these examples against the PyMOTW code it won't report the "
"same errors, since I have fixed my code in this release."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:101
msgid "`tabnanny <http://docs.python.org/library/tabnanny.html>`_"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:101
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:103
msgid ":mod:`tokenize`"
msgstr ""

#: ../../src/PyMOTW/tabnanny/index.rst:104
msgid "Lexical scanner for Python source code."
msgstr ""

