# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/os/index.rst:3
msgid "os -- Portable access to operating system specific features."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:8
msgid "Portable access to operating system specific features."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:9
msgid "1.4 (or earlier)"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:11
msgid ""
"The :mod:`os` module provides a wrapper for platform specific modules "
"such as :mod:`posix`, :mod:`nt`, and :mod:`mac`. The API for functions "
"available on all platform should be the same, so using the :mod:`os` "
"module offers some measure of portability. Not all functions are "
"available on all platforms, however. Many of the process management "
"functions described in this summary are not available for Windows."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:18
msgid ""
"The Python documentation for the :mod:`os` module is subtitled "
"\"Miscellaneous operating system interfaces\". The module consists mostly"
" of functions for creating and managing running processes or filesystem "
"content (files and directories), with a few other bits of functionality "
"thrown in besides."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:26
msgid ""
"Some of the example code below will only work on Unix-like operating "
"systems."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:30
msgid "Process Owner"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:32
msgid ""
"The first set of functions to cover are used for determining and changing"
" the process owner ids. These are mostly useful to authors of daemons or "
"special system programs which need to change permission level rather than"
" running as ``root``. This section does not try to explain all of the "
"intricate details of Unix security, process owners, etc. See the "
"References list below for more details."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:39
msgid ""
"This first script shows the real and effective user and group information"
" for a process, and then changes the effective values. This is similar to"
" what a daemon would need to do when it starts as root during a system "
"boot, to lower the privilege level and run as a different user."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:47
msgid ""
"Before running the example, change the :data:`TEST_GID` and "
":data:`TEST_UID` values to match a real user."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:54
msgid ""
"When run as user with id of 527 and group 501 on OS X, this output is "
"produced:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:89
msgid ""
"Notice that the values do not change. When not running as root, processes"
" cannot change their effective owner values. Any attempt to set the "
"effective user id or group id to anything other than that of the current "
"user causes an :ref:`OSError <exceptions-OSError>`."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:94
msgid ""
"Running the same script using :command:`sudo` so that it starts out with "
"root privileges is a different story."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:124
msgid ""
"In this case, since it starts as root, it can change the effective user "
"and group for the process. Once the effective UID is changed, the process"
" is limited to the permissions of that user. Since non-root users cannot "
"change their effective group, the program needs to change the group "
"before changing the user."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:130
msgid ""
"Besides finding and changing the process owner, there are functions for "
"determining the current and parent process id, finding and changing the "
"process group and session ids, as well as finding the controlling "
"terminal id. These can be useful for sending signals between processes or"
" for complex applications such as writing a command line shell."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:137
msgid "Process Environment"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:139
msgid ""
"Another feature of the operating system exposed to a program though the "
":mod:`os` module is the environment. Variables set in the environment are"
" visible as strings that can be read through :data:`os.environ` or "
":func:`getenv()`. Environment variables are commonly used for "
"configuration values such as search paths, file locations, and debug "
"flags. This example shows how to retrieve an environment variable, and "
"pass a value through to a child process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:152
msgid ""
"The :data:`os.environ` object follows the standard Python mapping API for"
" retrieving and setting values. Changes to :data:`os.environ` are "
"exported for child processes."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:180
msgid "Process Working Directory"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:182
msgid ""
"Operating systems with hierarchical filesystems have a concept of the "
"*current working directory* -- the directory on the filesystem the "
"process uses as the starting location when files are accessed with "
"relative paths.  The current working directory can be retrieved with "
":func:`getcwd` and changed with :func:`chdir`."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:192
msgid ""
":const:`os.curdir` and :const:`os.pardir` are used to refer to the "
"current and parent directories in a portable manner. The output should "
"not be surprising:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:212
msgid "Pipes"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:214
msgid ""
"The :mod:`os` module provides several functions for managing the I/O of "
"child processes using *pipes*. The functions all work essentially the "
"same way, but return different file handles depending on the type of "
"input or output desired. For the most part, these functions are made "
"obsolete by the :mod:`subprocess` module (added in Python 2.4), but there"
" is a good chance legacy code uses them."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:221
msgid ""
"The most commonly used pipe function is :func:`popen()`. It creates a new"
" process running the command given and attaches a single stream to the "
"input or output of that process, depending on the *mode* argument. While "
":func:`popen` functions work on Windows, some of these examples assume a "
"Unix-like shell."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:231
msgid "The descriptions of the streams also assume Unix-like terminology:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:233
msgid ""
"stdin - The \"standard input\" stream for a process (file descriptor 0) "
"is readable by the process. This is usually where terminal input goes."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:236
msgid ""
"stdout - The \"standard output\" stream for a process (file descriptor 1)"
" is writable by the process, and is used for displaying regular output to"
" the user."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:240
msgid ""
"stderr - The \"standard error\" stream for a process (file descriptor 2) "
"is writable by the process, and is used for conveying error messages."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:259
msgid ""
"The caller can only read from or write to the streams associated with the"
" child process, which limits the usefulness. The other :func:`popen` "
"variants provide additional streams so it is possible to work with stdin,"
" stdout, and stderr as needed."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:264
msgid ""
"For example, :func:`popen2()` returns a write-only stream attached to "
"stdin of the child process, and a read-only stream attached to its "
"stdout."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:273
msgid ""
"This simplistic example illustrates bi-directional communication. The "
"value written to stdin is read by ``cat`` (because of the ``'-'`` "
"argument), then written back to stdout. A more complicated process could "
"pass other types of messages back and forth through the pipe; even "
"serialized objects."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:292
msgid ""
"In most cases, it is desirable to have access to both stdout and stderr. "
"The stdout stream is used for message passing and the stderr stream is "
"used for errors, so reading from it separately reduces the complexity for"
" parsing any error messages. The :func:`popen3()` function returns three "
"open streams tied to stdin, stdout, and stderr of the new process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:303
msgid ""
"Notice that the program has to read from and close both stdout and stderr"
" *separately*. There are some related to flow control and sequencing when"
" dealing with I/O for multiple processes. The I/O is buffered, and if the"
" caller expects to be able to read all of the data from a stream then the"
" child process must close that stream to indicate the end-of-file. For "
"more information on these issues, refer to the `Flow Control Issues "
"<http://docs.python.org/library/popen2.html#popen2-flow-control>`__ "
"section of the Python library documentation."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:327
msgid ""
"And finally, :func:`popen4()` returns 2 streams, stdin and a merged "
"stdout/stderr.  This is useful when the results of the command need to be"
" logged, but not parsed directly."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:335
msgid "All of the messages written to both stdout and stderr are read together."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:351
msgid ""
"Besides accepting a single string command to be given to the shell for "
"parsing, :func:`popen2()`, :func:`popen3()`, and :func:`popen4()` also "
"accept a sequence of strings (command, followed by arguments)."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:359
msgid "In this case, the arguments are not processed by the shell."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:376
msgid "File Descriptors"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:378
msgid ""
":mod:`os` includes the standard set of functions for working with low-"
"level *file descriptors* (integers representing open files owned by the "
"current process). This is a lower-level API than is provided by "
":class:`file` objects. They are not covered here because it is generally "
"easier to work directly with :class:`file` objects. Refer to the library "
"documentation for details."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:386
msgid "Filesystem Permissions"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:388
msgid ""
"The function :func:`access()` can be used to test the access rights a "
"process has for a file."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:395
msgid ""
"The results will vary depending on how the example code is installed, but"
" it will look something like this:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:415
msgid ""
"The library documentation for :func:`access()` includes two special "
"warnings. First, there isn't much sense in calling :func:`access()` to "
"test whether a file can be opened before actually calling :func:`open()` "
"on it. There is a small, but real, window of time between the two calls "
"during which the permissions on the file could change. The other warning "
"applies mostly to networked filesystems that extend the POSIX permission "
"semantics. Some filesystem types may respond to the POSIX call that a "
"process has permission to access a file, then report a failure when the "
"attempt is made using :func:`open()` for some reason not tested via the "
"POSIX call. All in all, it is better to call :func:`open()` with the "
"required mode and catch the :ref:`IOError <exceptions-IOError>` raised if"
" there is a problem."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:429
msgid ""
"More detailed information about the file can be accessed using "
":func:`stat()` or :func:`lstat()` (for checking the status of something "
"that might be a symbolic link)."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:437
msgid ""
"Once again, the output will vary depending on how the example code was "
"installed. Try passing different filenames on the command line to "
"``os_stat.py``."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:459
msgid ""
"On Unix-like systems, file permissions can be changed using "
":func:`chmod()`, passing the mode as an integer. Mode values can be "
"constructed using constants defined in the :mod:`stat` module.  This "
"example toggles the user's execute permission bit:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:469
msgid ""
"The script assumes it has the permissions necessary to modify the mode of"
" the file when run."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:487
msgid "Directories"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:489
msgid ""
"There are several functions for working with directories on the "
"filesystem, including creating, listing contents, and removing them."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:496
msgid ""
"There are two sets of functions for creating and deleting directories. "
"When creating a new directory with :func:`mkdir()`, all of the parent "
"directories must already exist. When removing a directory with "
":func:`rmdir()`, only the leaf directory (the last part of the path) is "
"actually removed. In contrast, :func:`makedirs()` and "
":func:`removedirs()` operate on all of the nodes in the path.  "
":func:`makedirs()` will create any parts of the path which do not exist, "
"and :func:`removedirs()` will remove all of the parent directories "
"(assuming it can)."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:524
msgid "Symbolic Links"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:526
msgid ""
"For platforms and filesystems that support them, there are functions for "
"working with symlinks."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:534
msgid ""
"Although :mod:`os` includes :func:`tempnam()` for creating temporary "
"filenames, it is not as secure as the :mod:`tempfile` module and produces"
" a :ref:`RuntimeWarning <exceptions-RuntimeWarning>` message when it is "
"used. In general it is better to use :mod:`tempfile`, as in this example."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:556
msgid "Walking a Directory Tree"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:558
msgid ""
"The function :func:`walk()` traverses a directory recursively and for "
"each directory generates a tuple containing the directory path, any "
"immediate sub-directories of that path, and the names of any files in "
"that directory."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:567
msgid "This example shows a recursive directory listing."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:613
msgid "Running External Commands"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:617
msgid ""
"Many of these functions for working with processes have limited "
"portability. For a more consistent way to work with processes in a "
"platform independent manner, see the :mod:`subprocess` module instead."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:622
msgid ""
"The simplest way to run a separate command, without interacting with it "
"at all, is :func:`system()`. It takes a single string which is the "
"command line to be executed by a sub-process running a shell."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:630
msgid ""
"The return value of :func:`system` is the exit value of the shell running"
" the program packed into a 16 bit number, with the high byte the exit "
"status and the low byte the signal number that caused the process to die,"
" or zero."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:675
msgid ""
"Since the command is passed directly to the shell for processing, it can "
"even include shell syntax such as globbing or environment variables:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:695
msgid ""
"Unless the command is explicitly run in the background, the call to "
":func:`system()` blocks until it is complete. Standard input, output, and"
" error from the child process are tied to the appropriate streams owned "
"by the caller by default, but can be redirected using shell syntax."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:706
msgid ""
"This is getting into shell trickery, though, and there are better ways to"
" accomplish the same thing."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:727
msgid "Creating Processes with os.fork()"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:729
msgid ""
"The POSIX functions :func:`fork()` and :func:`exec*()` (available under "
"Mac OS X, Linux, and other UNIX variants) are exposed via the :mod:`os` "
"module. Entire books have been written about reliably using these "
"functions, so check the library or bookstore for more details than are "
"presented here."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:735
msgid ""
"To create a new process as a clone of the current process, use "
":func:`fork()`:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:742
msgid ""
"The output will vary based on the state of the system each time the "
"example is run, but it will look something like:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:758
msgid ""
"After the fork, there are two processes running the same code. For a "
"program to tell which one it is in, it needs to check the return value of"
" :func:`fork()`. If the value is ``0``, the current process is the child."
"  If it is not ``0``, the program is running in the parent process and "
"the return value is the process id of the child process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:764
msgid ""
"From the parent process, it is possible to send the child signals. This "
"is a bit more complicated to set up, and uses the :mod:`signal` module. "
"First, define a signal handler to be invoked when the signal is received."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:772
msgid ""
"Then :func:`fork`, and in the parent pause a short amount of time before "
"sending a :const:`USR1` signal using :func:`kill()`. The short pause "
"gives the child process time to set up the signal handler."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:779
msgid ""
"In the child, set up the signal handler and go to sleep for a while to "
"give the parent time to send the signal:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:786
msgid "A real application, wouldn't need (or want) to call :func:`sleep()`."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:807
msgid ""
"A simple way to handle separate behavior in the child process is to check"
" the return value of :func:`fork()` and branch. More complex behavior may"
" call for more code separation than a simple branch. In other cases, "
"there may be an existing program that needs to be wrapped. For both of "
"these situations, the :func:`exec*()` series of functions can be used to "
"run another program."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:818
msgid ""
"When a program is \"execed\", the code from that program replaces the "
"code from the existing process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:849
msgid ""
"There are many variations of :func:`exec*()`, depending on the form in "
"which the arguments are available, whether the path and environment of "
"the parent process should be be copied to the child, etc. Refer to the "
"library documentation for complete details."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:854
msgid ""
"For all variations, the first argument is a path or filename and the "
"remaining arguments control how that program runs. They are either passed"
" as command line arguments or override the process \"environment\" (see "
":data:`os.environ` and :data:`os.getenv`)."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:860
msgid "Waiting for a Child"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:862
msgid ""
"Many computationally intensive programs use multiple processes to work "
"around the threading limitations of Python and the Global Interpreter "
"Lock. When starting several processes to run separate tasks, the master "
"will need to wait for one or more of them to finish before starting new "
"ones, to avoid overloading the server. There are a few different ways to "
"do that using :func:`wait()` and related functions."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:869
msgid ""
"When it does not matter which child process might exit first, use "
":func:`wait()`.  It returns as soon as any child process exits."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:877
msgid ""
"The return value from :func:`wait()` is a tuple containing the process id"
" and exit status (\"a 16-bit number, whose low byte is the signal number "
"that killed the process, and whose high byte is the exit status\")."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:914
msgid "To wait for a specific process, use :func:`waitpid()`."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:920
msgid ""
"Pass the process id of the target process, and :func:`waitpid` blocks "
"until that process exits."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:955
msgid ""
":func:`wait3()` and :func:`wait4()` work in a similar manner, but return "
"more detailed information about the child process with the pid, exit "
"status, and resource usage."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:960
msgid "Spawn"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:962
msgid ""
"As a convenience, the :func:`spawn*()` family of functions handles the "
":func:`fork()` and :func:`exec*()` in one statement:"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:969
msgid ""
"The first argument is a mode indicating whether or not to wait for the "
"process to finish before returning.  This example waits.  Use "
":const:`P_NOWAIT` to let the other process start, but then resume in the "
"current process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1005
msgid "`os <http://docs.python.org/lib/module-os.html>`_"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1005
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1008
msgid ":mod:`subprocess`"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1008
msgid "The subprocess module supersedes os.popen()."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1012
msgid ":mod:`multiprocessing`"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1011
msgid ""
"The multiprocessing module makes working with extra processes easier than"
" doing all of the work yourself."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1015
msgid ":mod:`tempfile`"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1015
msgid "The tempfile module for working with temporary files."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1020
msgid "*Unix Manual Page Introduction*"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1018
msgid "Includes definitions of real and effective ids, etc."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1020
msgid "http://www.scit.wlv.ac.uk/cgi-bin/mansec?2+intro"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1025
msgid "*Speaking UNIX, Part 8.*"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1023
msgid "Learn how UNIX multitasks."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1025
msgid "http://www.ibm.com/developerworks/aix/library/au-speakingunix8/index.html"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1030
msgid "*Unix Concepts*"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1028
msgid "For more discussion of stdin, stdout, and stderr."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1030
msgid "http://www.linuxhq.com/guides/LUG/node67.html"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1035
msgid "*Delve into Unix Process Creation*"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1033
msgid "Explains the life cycle of a UNIX process."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1035
msgid "http://www.ibm.com/developerworks/aix/library/au-unixprocess.html"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1039
msgid ""
"`Advanced Programming in the UNIX(R) Environment <http://www.amazon.com"
"/Programming-Environment-Addison-Wesley-Professional-"
"Computing/dp/0201433079/ref=pd_bbs_3/002-2842372-4768037?ie=UTF8&s=books&amp;qid=1182098757&sr=8-3>`_"
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1038
msgid ""
"Covers working with multiple processes, such as handling signals, closing"
" duplicated file descriptors, etc."
msgstr ""

#: ../../src/PyMOTW/os/index.rst:1041
msgid ":ref:`article-file-access`"
msgstr ""

