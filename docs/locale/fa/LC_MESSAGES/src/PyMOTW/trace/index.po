# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/trace/index.rst:3
msgid "trace -- Follow Python statements as they are executed"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:8
msgid ""
"Monitor which statements and functions are executed as a program runs to "
"produce coverage and call-graph information."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:9
msgid "2.3 and later"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:11
msgid ""
"The :mod:`trace` module helps you understand the way your program runs.  "
"You can trace the statements executed, produce coverage reports, and "
"investigate the relationships between functions that call each other."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:17
msgid "Command Line Interface"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:19
msgid ""
"It is easy use :mod:`trace` directly from the command line.  Given the "
"following Python scripts as input:"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:31
msgid "Tracing Execution"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:33
msgid ""
"We can see which statements are being executed as the program runs using "
"the :option:`--trace` option."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:82
msgid ""
"The first part of the output shows some setup operations performed by "
":mod:`trace`.  The rest of the output shows the entry into each function,"
" including the module where the function is located, and then the lines "
"of the source file as they are executed.  You can see that "
":func:`recurse()` is entered three times, as you would expect from the "
"way it is called in :func:`main()`."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:90
msgid "Code Coverage"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:92
msgid ""
"Running :mod:`trace` from the command line with the :option:`--count` "
"option will produce code coverage report information, so you can see "
"which lines are run and which are skipped.  Since your program is usually"
" made up of multiple files, a separate coverage report is produced for "
"each.  By default the coverage report files are written to the same "
"directory as the module, named after the module but with a ``.cover`` "
"extension instead of ``.py``."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:115
msgid "And two output files, ``trace_example/main.cover``:"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:121
msgid "and ``trace_example/recurse.cover``:"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:129
msgid ""
"Although the line ``def recurse(level):`` has a count of ``1``, that does"
" not mean the function was only run once.  It means the function "
"*definition* was only executed once."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:133
msgid ""
"It is also possible to run the program several times, perhaps with "
"different options, to save the coverage data and produce a combined "
"report."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:171
msgid ""
"Once the coverage information is recorded to the ``.cover`` files, you "
"can produce reports with the :option:`--report` option."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:189
#, python-format
msgid ""
"Since the program ran three times, the coverage report shows values three"
" times higher than the first report.  The :option:`--summary` option adds"
" the percent covered information to the output above.  The ``recurse`` "
"module is only 87% covered.  A quick look at the cover file for recurse "
"shows that the body of ``not_called()`` is indeed never run, indicated by"
" the ``>>>>>>`` prefix."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:201
msgid "Calling Relationships"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:203
msgid ""
"In addition to coverage information, :mod:`trace` will collect and report"
" on the relationships between functions that call each other."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:206
msgid "For a simple list of the functions called, use :option:`--listfuncs`:"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:231
msgid ""
"For more details about who is doing the calling, use "
":option:`--trackcalls`."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:271
msgid "Programming Interface"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:273
msgid ""
"For a little more control over the trace interface, you can invoke it "
"from within your program using a :class:`Trace` object. :class:`Trace` "
"lets you set up fixtures and other dependencies before running a single "
"function or execing a Python command to be traced."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:282
msgid ""
"Since the example only traces into the :func:`recurse()` function, no "
"information from ``main.py`` is included in the output."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:316
msgid ""
"That same output could have been produced with the :func:`runfunc()` "
"method, too.  :func:`runfunc()` accepts arbitrary positional and keyword "
"arguments, which are passed to the function when it is called by the "
"tracer."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:354
msgid "Saving Result Data"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:356
msgid ""
"Counts and coverage information can be recorded as well, just as with the"
" command line interface.  The data must be saved explicitly, using the "
":class:`CoverageResults` instance from the :class:`Trace` object."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:384
msgid "And the contents of ``coverdir2/trace_example.recurse.cover``:"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:389
msgid ""
"To save the counts data for generating reports, use the *infile* and "
"*outfile* argument to :class:`Trace`."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:396
msgid ""
"Pass a filename to *infile* to read previously stored data, and a "
"filename to *outfile* to write new results after tracing.  If *infile* "
"and *outfile* are the same, it has the effect of updating the file with "
"cummulative data."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:418
msgid "Trace Options"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:420
msgid ""
"The constructor for :class:`Trace` takes several optional parameters to "
"control runtime behavior."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:423
msgid "*count*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:424
msgid "Boolean.  Turns on line number counting.  Defaults to True."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:426
msgid "*countfuncs*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:426
msgid ""
"Boolean.  Turns on list of functions called during the run. Defaults to "
"False."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:429
msgid "*countcallers*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:429
msgid "Boolean.  Turns on tracking for callers and callees.  Defaults to False."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:432
msgid "*ignoremods*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:432
msgid ""
"Sequence.  List of modules or packages to ignore when tracking coverage."
"  Defaults to an empty tuple."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:435
msgid "*ignoredirs*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:435
msgid ""
"Sequence.  List of directories containing modules or packages to be "
"ignored.  Defaults to an empty tuple."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:437
msgid "*infile*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:438
msgid "Name of the file containing cached count values.  Defaults to None."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:441
msgid "*outfile*"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:440
msgid ""
"Name of the file to use for storing cached count files.  Defaults to "
"None, and data is not stored."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:446
msgid "`trace <http://docs.python.org/lib/module-trace.html>`_"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:446
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:450
msgid ":ref:`sys-tracing`"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:449
msgid ""
"The :mod:`sys` module includes facilities for adding your own tracing "
"function to the interpreter at run-time."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:453
msgid "`coverage.py <http://nedbatchelder.com/code/modules/coverage.html>`_"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:453
msgid "Ned Batchelder's coverage module."
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:455
msgid "`figleaf <http://darcs.idyll.org/~t/projects/figleaf/doc/>`_"
msgstr ""

#: ../../src/PyMOTW/trace/index.rst:456
msgid "Titus Brown's coverage app."
msgstr ""

