# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/asyncore/index.rst:3
msgid "asyncore -- Asynchronous I/O handler"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:8
msgid "Asynchronous I/O handler"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:9
msgid "1.5.2 and later"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:11
msgid ""
"The asyncore module includes tools for working with I/O objects such as "
"sockets so they can be managed asynchronously (instead of, for example, "
"using threads).  The main class provided is :class:`dispatcher`, a "
"wrapper around a socket that provides hooks for handling events like "
"connecting, reading, and writing when invoked from the main loop "
"function, :func:`loop`."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:14
msgid "Clients"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:16
msgid ""
"To create an asyncore-based client, subclass :class:`dispatcher` and "
"provide implementations for creating the socket, reading, and writing.  "
"Let's examine this HTTP client, based on the one from the standard "
"library documentation."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:22
msgid ""
"First, the socket is created in ``__init__()`` using the base class "
"method ``create_socket()``.  Alternative implementations of the method "
"may be provided, but in this case we want a TCP/IP socket so the base "
"class version is sufficient."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:24
msgid ""
"The ``handle_connect()`` hook is present simply to illustrate when it is "
"called.  Other types of clients that need to do some sort of hand-shaking"
" or protocol negotiation should do the work in ``handle_connect()``."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:26
msgid ""
"``handle_close()`` is similarly presented for the purposes of showing "
"when the method is called.  The base class version closes the socket "
"correctly, so if you don't need to do extra cleanup on close you can "
"leave the method out."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:28
msgid ""
"The asyncore loop uses ``writable()`` and its sibling method "
"``readable()`` to decide what actions to take with each dispatcher.  "
"Actual use of poll() or select() on the sockets or file descriptors "
"managed by each dispatcher is handled inside the :mod:`asyncore` code, so"
" you don't need to do that yourself.  Simply indicate whether the "
"dispatcher cares at all about reading or writing.  In the case of this "
"HTTP client, ``writable()`` returns True as long as there is data from "
"the request to send to the server.  ``readable()`` always returns True "
"because we want to read all of the data."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:30
msgid ""
"Each time through the loop when ``writable()`` responds positively, "
"``handle_write()`` is invoked.  In this version, the HTTP request string "
"that was built in ``__init__()`` is sent to the server and the write "
"buffer is reduced by the amount successfully sent."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:32
msgid ""
"Similarly, when ``readable()`` responds positively and there is data to "
"read, ``handle_read()`` is invoked."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:34
msgid ""
"The example below the ``__main__`` test configures logging for debugging "
"then creates two clients to download two separate web pages.  Creating "
"the clients registers them in a \"map\" kept internally by asyncore.  The"
" downloading occurs as the loop iterates over the clients.  When the "
"client reads 0 bytes from a socket that seems readable, the condition is "
"interpreted as a closed connection and ``handle_close()`` is called."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:36
msgid "One example of how this client app may run is:"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:176
msgid "Servers"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:178
msgid ""
"The example below illustrates using asyncore on the server by re-"
"implementing the EchoServer from the :mod:`SocketServer` examples.  There"
" are three classes: ``EchoServer`` receives incoming connections from "
"clients and creates ``EchoHandler`` instances to deal with each.  The "
"``EchoClient`` is an asyncore dispatcher similar to the HttpClient "
"defined above."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:184
msgid ""
"The EchoServer and EchoHandler are defined in separate classes because "
"they do different things.  When EchoServer accepts a connection, a new "
"socket is established.  Rather than try to dispatch to individual clients"
" within EchoServer, an EchoHandler is created to take advantage of the "
"socket map maintained by asyncore."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:279
msgid ""
"In this example the server, handler, and client objects are all being "
"maintained in the same socket map by asyncore in a single process. To "
"separate the server from the client, simply instantiate them from "
"separate scripts and run ``asyncore.loop()`` in both. When a dispatcher "
"is closed, it is removed from the map maintained by asyncore and the loop"
" exits when the map is empty."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:282
msgid "Working with Other Event Loops"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:284
msgid ""
"It is sometimes necessary to integrate the asyncore event loop with an "
"event loop from the parent application.  For example, a GUI application "
"would not want the UI to block until all asynchronous transfers are "
"handled -- that would defeat the purpose of making them asynchronous.  To"
" make this sort of integration easy, ``asyncore.loop()`` accepts "
"arguments to set a timeout and to limit the number of times the loop is "
"run.  We can see their effect on the client by re-using HttpClient from "
"the first example."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:290
msgid ""
"Here we see that the client is only asked to read or data once per call "
"into ``asyncore.loop()``.  Instead of our own ``while`` loop, we could "
"call ``asyncore.loop()`` like this from a GUI toolkit idle handler or "
"other mechanism for doing a small amount of work when the UI is not busy "
"with other event handlers."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:465
msgid "Working with Files"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:467
msgid ""
"Normally you would want to use asyncore with sockets, but there are times"
" when it is useful to read files asynchronously, too (to use files when "
"testing network servers without requiring the network setup, or to read "
"or write large data files in parts).  For these situations, asyncore "
"provides the :class:`file_dispatcher` and :class:`file_wrapper` classes."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:473
msgid ""
"This example was tested under Python 2.5.2, so I am using ``os.open()`` "
"to get a file descriptor for the file.  For Python 2.6 and later, "
"``file_dispatcher`` automatically converts anything with a ``fileno()`` "
"method to a file descriptor."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:495
msgid "`asyncore <http://docs.python.org/library/asyncore.html>`_"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:495
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:499
msgid ":mod:`asynchat`"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:498
msgid ""
"The asynchat module builds on asyncore to make it easier to create "
"clients and servers communicate by passing messages back and forth using "
"a set protocol."
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:502
msgid ":mod:`SocketServer`"
msgstr ""

#: ../../src/PyMOTW/asyncore/index.rst:502
msgid ""
"The SocketServer module article includes another example of the "
"EchoServer with threading and forking variants."
msgstr ""

