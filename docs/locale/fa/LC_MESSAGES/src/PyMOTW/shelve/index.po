# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/shelve/index.rst:3
msgid "shelve -- Persistent storage of arbitrary Python objects"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:8
msgid ""
"The shelve module implements persistent storage for arbitrary Python "
"objects which can be pickled, using a dictionary-like API."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:10
msgid ""
"The :mod:`shelve` module can be used as a simple persistent storage "
"option for Python objects when a relational database is overkill. The "
"shelf is accessed by keys, just as with a dictionary. The values are "
"pickled and written to a database created and managed by :mod:`anydbm`."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:18
msgid "Creating a new Shelf"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:20
msgid ""
"The simplest way to use shelve is via the :class:`DbfilenameShelf` class."
" It uses anydbm to store the data. You can use the class directly, or "
"simply call :func:`shelve.open()`:"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:28
msgid "To access the data again, open the shelf and use it like a dictionary:"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:34
msgid "If you run both sample scripts, you should see:"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:51
msgid ""
"The :mod:`dbm` module does not support multiple applications writing to "
"the same database at the same time. If you know your client will not be "
"modifying the shelf, you can tell shelve to open the database read-only."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:59
msgid ""
"If your program tries to modify the database while it is opened read-"
"only, an access error exception is generated. The exception type depends "
"on the database module selected by anydbm when the database was created."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:65
msgid "Write-back"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:67
msgid ""
"Shelves do not track modifications to volatile objects, by default. That "
"means if you change the contents of an item stored in the shelf, you must"
" update the shelf explicitly by storing the item again."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:75
msgid ""
"In this example, the dictionary at 'key1' is not stored again, so when "
"the shelf is re-opened, the changes have not been preserved."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:93
msgid ""
"To automatically catch changes to volatile objects stored in the shelf, "
"open the shelf with writeback enabled. The writeback flag causes the "
"shelf to remember all of the objects retrieved from the database using an"
" in-memory cache. Each cache object is also written back to the database "
"when the shelf is closed."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:103
msgid ""
"Although it reduces the chance of programmer error, and can make object "
"persistence more transparent, using writeback mode may not be desirable "
"in every situation. The cache consumes extra memory while the shelf is "
"open, and pausing to write every cached object back to the database when "
"it is closed can take extra time. Since there is no way to tell if the "
"cached objects have been modified, they are all written back. If your "
"application reads data more than it writes, writeback will add more "
"overhead than you might want."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:132
msgid "Specific Shelf Types"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:134
msgid ""
"The examples above all use the default shelf implementation. Using "
":func:`shelve.open()` instead of one of the shelf implementations "
"directly is a common usage pattern, especially if you do not care what "
"type of database is used to store the data. There are times, however, "
"when you do care. In those situations, you may want to use "
":class:`DbfilenameShelf` or :class:`BsdDbShelf` directly, or even "
"subclass :class:`Shelf` for a custom solution."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:145
msgid "`shelve <http://docs.python.org/lib/module-shelve.html>`_"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:145
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:148
msgid ":mod:`anydbm`"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:148
msgid "The anydbm module."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:151
msgid "`feedcache <http://www.doughellmann.com/projects/feedcache/>`_"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:151
msgid "The feedcache module uses shelve as a default storage option."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:154
msgid "`shove <http://pypi.python.org/pypi/shove/>`_"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:154
msgid "Shove implements a similar API with more backend formats."
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:156
msgid ":ref:`article-data-persistence`"
msgstr ""

#: ../../src/PyMOTW/shelve/index.rst:157
msgid "Other mechanisms for storing data using standard library modules."
msgstr ""

