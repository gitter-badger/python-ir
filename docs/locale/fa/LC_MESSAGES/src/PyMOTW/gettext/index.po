# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/gettext/index.rst:3
msgid "gettext -- Message Catalogs"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:8
msgid "Message catalog API for internationalization."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:9
msgid "2.1.3 and later"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:11
msgid ""
"The :mod:`gettext` module provides a pure-Python implementation "
"compatible with the `GNU gettext`_ library for message translation and "
"catalog management.  The tools available with the Python source "
"distribution enable you to extract messages from your source, build a "
"message catalog containing translations, and use that message catalog to "
"print an appropriate message for the user at runtime."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:18
msgid ""
"Message catalogs can be used to provide internationalized interfaces for "
"your program, showing messages in a language appropriate to the user.  "
"They can also be used for other message customizations, including "
"\"skinning\" an interface for different wrappers or partners."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:25
msgid ""
"Although the standard library documentation says everything you need is "
"included with Python, I found that ``pygettext.py`` refused to extract "
"messages wrapped in the ``ungettext`` call, even when I used what seemed "
"to be the appropriate command line options. I ended up installing the "
"`GNU gettext`_ tools from source and using ``xgettext`` instead."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:33
msgid "Translation Workflow Overview"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:35
msgid "The process for setting up and using translations includes five steps:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:37
msgid "Mark up literal strings in your code that contain messages to translate."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:39
msgid ""
"Start by identifying the messages within your program source that need to"
" be translated, and marking the literal strings so the extraction program"
" can find them."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:43
msgid "Extract the messages."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:45
msgid ""
"After you have identified the translatable strings in your program "
"source, use ``xgettext`` to pull the strings out and create a ``.pot`` "
"file, or translation template. The template is a text file with copies of"
" all of the strings you identified and placeholders for their "
"translations."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:51
msgid "Translate the messages."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:53
msgid ""
"Give a copy of the ``.pot`` file to the translator, changing the "
"extension to ``.po``. The ``.po`` file is an editable source file used as"
" input for the compilation step. The translator should update the header "
"text in the file and provide translations for all of the strings."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:59
msgid "\"Compile\" the message catalog from the translation."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:61
msgid ""
"When the translator gives you back the completed ``.po`` file, compile "
"the text file to the binary catalog format using ``msgfmt``. The binary "
"format is used by the runtime catalog lookup code."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:66
msgid "Load and activate the appropriate message catalog at runtime."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:68
msgid ""
"The final step is to add a few lines to your application to configure and"
" load the message catalog and install the translation function. There are"
" a couple of ways to do that, with associated trade-offs, and each is "
"covered below."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:73
msgid ""
"Let's go through those steps in a little more detail, starting with the "
"modifications you need to make to your code."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:77
msgid "Creating Message Catalogs from Source Code"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:79
msgid ""
":mod:`gettext` works by finding literal strings embedded in your program "
"in a database of translations, and pulling out the appropriate translated"
" string.  There are several variations of the functions for accessing the"
" catalog, depending on whether you are working with Unicode strings or "
"not.  The usual pattern is to bind the lookup function you want to use to"
" the name ``_`` so that your code is not cluttered with lots of calls to "
"functions with longer names."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:87
msgid ""
"The message extraction program, ``xgettext``, looks for messages embedded"
" in calls to the catalog lookup functions.  It understands different "
"source languages, and uses an appropriate parser for each. If you use "
"aliases for the lookup functions or need to add extra functions, you can "
"give ``xgettext`` the names of additional symbols to consider when "
"extracting messages."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:94
msgid "Here's a simple script with a single message ready to be translated:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:100
msgid ""
"In this case I am using the Unicode version of the lookup function, "
"``ugettext()``.  The text ``\"This message is in the script.\"`` is the "
"message to be substituted from the catalog.  I've enabled fallback mode, "
"so if we run the script without a message catalog, the in-lined message "
"is printed:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:119
msgid ""
"The next step is to extract the message(s) and create the ``.pot`` file, "
"using ``pygettext.py``."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:134
msgid "The output file produced looks like:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:139
msgid ""
"Message catalogs are installed into directories organized by *domain* and"
" *language*.  The domain is usually a unique value like your application "
"name.  In this case, I used ``gettext_example``.  The language value is "
"provided by the user's environment at runtime, through one of the "
"environment variables ``LANGUAGE``, ``LC_ALL``, ``LC_MESSAGES``, or "
"``LANG``, depending on their configuration and platform.  My language is "
"set to ``en_US`` so that's what I'll be using in all of the examples "
"below."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:148
msgid ""
"Now that we have the template, the next step is to create the required "
"directory structure and copy the template in to the right spot.  I'm "
"going to use the ``locale`` directory inside the PyMOTW source tree as "
"the root of my message catalog directory, but you would typically want to"
" use a directory accessible system-wide.  The full path to the catalog "
"input source is ``$localedir/$language/LC_MESSAGES/$domain.po``, and the "
"actual catalog has the filename extension ``.mo``."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:157
msgid ""
"For my configuration, I need to copy ``gettext_example.pot`` to "
"``locale/en_US/LC_MESSAGES/gettext_example.po`` and edit it to change the"
" values in the header and add my alternate messages.  The result looks "
"like:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:165
msgid "The catalog is built from the ``.po`` file using ``msgformat``:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:179
msgid ""
"And now when we run the script, the message from the catalog is printed "
"instead of the in-line string:"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:196
msgid "Finding Message Catalogs at Runtime"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:198
msgid ""
"As described above, the *locale directory* containing the message "
"catalogs is organized based on the language with catalogs named for the "
"*domain* of the program.  Different operating systems define their own "
"default value, but :mod:`gettext` does not know all of these defaults.  "
"Iut uses a default locale directory of ``sys.prefix + '/share/locale'``, "
"but most of the time it is safer for you to always explicitly give a "
"``localedir`` value than to depend on this default being valid."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:207
msgid ""
"The language portion of the path is taken from one of several environment"
" variables that can be used to configure localization features "
"(``LANGUAGE``, ``LC_ALL``, ``LC_MESSAGES``, and ``LANG``). The first "
"variable found to be set is used.  Multiple languages can be selected by "
"separating the values with a colon (``:``).  We can illustrate how that "
"works by creating a second message catalog and running a few experiments."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:241
msgid ""
"Although ``find()`` shows the complete list of catalogs, only the first "
"one in the sequence is actually loaded for message lookups."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:270
msgid "Plural Values"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:272
msgid ""
"While simple message substitution will handle most of your translation "
"needs, :mod:`gettext` treats pluralization as a special case. Depending "
"on the language, the difference between the singular and plural forms of "
"a message may vary only by the ending of a single word, or the entire "
"sentence structure may be different.  There may also be `different forms "
"depending on the level of plurality "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_."
" To make managing plurals easier (and possible), there is a separate set "
"of functions for asking for the plural form of a message."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:298
msgid ""
"Since there are alternate forms to be translated, the replacements are "
"listed in an array.  Using an array allows translations for languages "
"with multiple plural forms (Polish, `for example "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_,"
" has different forms indicating the relative quantity)."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:307
msgid ""
"In addition to filling in the translation strings, you will also need to "
"describe the way plurals are formed so the library knows how to index "
"into the array for any given count value.  The line ``\"Plural-Forms: "
"nplurals=INTEGER; plural=EXPRESSION;\\n\"`` includes two values to "
"replace manually.  ``nplurals`` is an integer indicating the size of the "
"array (the number of translations used) and ``plural`` is a C language "
"expression for converting the incoming quantity to an index in the array "
"when looking up the translation.  The literal string ``n`` is replaced "
"with the quantity passed to ``ungettext()``."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:317
msgid ""
"For example, English includes two plural forms.  A quantity of ``0`` is "
"treated as plural (\"0 bananas\").  The Plural-Forms entry should look "
"like::"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:323
msgid ""
"The singular translation would then go in position 0, and the plural "
"translation in position 1."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:329
msgid ""
"If we run the test script a few times after the catalog is compiled, you "
"can see how different values of N are converted to indexes for the "
"translation strings."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:356
msgid "Application vs. Module Localization"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:358
msgid ""
"The scope of your translation effort defines how you install and use the "
":mod:`gettext` functions in your code."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:362
msgid "Application Localization"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:364
msgid ""
"For application-wide translations, it would be acceptable to install a "
"function like ``ungettext()`` globally using the ``__builtins__`` "
"namespace because you have control over the top-level of the "
"application's code."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:373
msgid ""
"The ``install()`` function binds ``gettext()`` to the name ``_()`` in the"
" ``__builtins__`` namespace.  It also adds ``ngettext()`` and other "
"functions listed in *names*.  If *unicode* is true, the Unicode versions "
"of the functions are used instead of the default ASCII versions."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:380
msgid "Module Localization"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:382
msgid ""
"For a library, or individual module, modifying ``__builtins__`` is not a "
"good idea because you don't know what conflicts you might introduce with "
"an application global value.  You can import or re-bind the names of "
"translation functions by hand at the top of your module."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:395
msgid "`gettext <http://docs.python.org/library/gettext.html>`_"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:395
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:398
msgid ":mod:`locale`"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:398
msgid "Other localization tools."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:407
msgid "`GNU gettext`_"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:401
msgid ""
"The message catalog formats, API, etc. for this module are all based on "
"the original gettext package from GNU.  The catalog file formats are "
"compatible, and the command line scripts have similar options (if not "
"identical).  The `GNU gettext manual "
"<http://www.gnu.org/software/gettext/manual/gettext.html>`_ has a "
"detailed description of the file formats and describes GNU versions of "
"the tools for working with them."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:411
msgid ""
"`Internationalizing Python "
"<http://www.python.org/workshops/1997-10/proceedings/loewis.html>`_"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:410
msgid ""
"A paper by Martin von Löwis about techniques for internationalization of "
"Python applications."
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:414
msgid ""
"`Django Internationalization "
"<http://docs.djangoproject.com/en/dev/topics/i18n/>`_"
msgstr ""

#: ../../src/PyMOTW/gettext/index.rst:414
msgid ""
"Another good source of information on using gettext, including real-life "
"examples."
msgstr ""

