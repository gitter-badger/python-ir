# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/bisect/index.rst:3
msgid "bisect -- Maintain lists in sorted order"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:8
msgid ""
"Maintains a list in sorted order without having to call sort each time an"
" item is added to the list."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:9
msgid "1.4"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:11
msgid ""
"The bisect module implements an algorithm for inserting elements into a "
"list while maintaining the list in sorted order. This can be much more "
"efficient than repeatedly sorting a list, or explicitly sorting a large "
"list after it is constructed."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:17
msgid "Example"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:19
msgid ""
"Let's look at a simple example using bisect.insort(), which inserts items"
" into a list in sorted order."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:26
msgid "The output for that script is:"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:58
msgid ""
"The first column shows the new random number. The second column shows the"
" position where the number will be inserted into the list. The remainder "
"of each line is the current sorted list."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:62
msgid ""
"This is a simple example, and for the amount of data we are manipulating "
"it might be faster to simply build the list and then sort it once. But "
"for long lists, significant time and memory savings can be achieved using"
" an insertion sort algorithm such as this."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:67
msgid ""
"You probably noticed that the result set above includes a few repeated "
"values (45 and 77). The bisect module provides 2 ways to handle repeats. "
"New values can be inserted to the left of existing values, or to the "
"right. The insort() function is actually an alias for insort_right(), "
"which inserts after the existing value. The corresponding function "
"insort_left() inserts before the existing value."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:74
msgid ""
"If we manipulate the same data using bisect_left() and insort_left(), we "
"end up with the same sorted list but notice that the insert positions are"
" different for the duplicate values."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:113
msgid ""
"In addition to the Python implementation, there is a faster C "
"implementation available. If the C version is present, that "
"implementation overrides the pure Python implementation automatically "
"when you import the bisect module."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:121
msgid "`bisect <http://docs.python.org/library/bisect.html>`_"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:121
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:124
msgid "`WikiPedia: Insertion Sort <http://en.wikipedia.org/wiki/Insertion_sort>`_"
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:124
msgid "A description of the insertion sort algorithm."
msgstr ""

#: ../../src/PyMOTW/bisect/index.rst:126
msgid ":ref:`article-data-structures`"
msgstr ""

