# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:3
msgid "BaseHTTPServer -- base classes for implementing web servers"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:8
msgid "BaseHTTPServer includes classes that can form the basis of a web server."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:9
msgid "1.4 and later"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:12
msgid ""
":mod:`BaseHTTPServer` uses classes from :mod:`SocketServer` to create "
"base classes for making HTTP servers. :class:`HTTPServer` can be used "
"directly, but the :class:`BaseHTTPRequestHandler` is intended to be "
"extended to handle each protocol method (GET, POST, etc.)."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:18
msgid "HTTP GET"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:20
msgid ""
"To add support for an HTTP method in your request handler class, "
"implement the method :func:`do_METHOD`, replacing *METHOD* with the name "
"of the HTTP method. For example, :func:`do_GET`, :func:`do_POST`, etc. "
"For consistency, the method takes no arguments. All of the parameters for"
" the request are parsed by :class:`BaseHTTPRequestHandler` and stored as "
"instance attributes of the request instance."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:28
msgid ""
"This example request handler illustrates how to return a response to the "
"client and some of the local attributes which can be useful in building "
"the response:"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:36
msgid ""
"The message text is assembled and then written to :attr:`wfile`, the file"
" handle wrapping the response socket. Each response needs a response "
"code, set via :func:`send_response`. If an error code is used (404, 501, "
"etc.), an appropriate default error message is included in the header, or"
" a message can be passed with the error code."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:42
msgid ""
"To run the request handler in a server, pass it to the constructor of "
"HTTPServer, as in the ``__main__`` processing portion of the sample "
"script."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:45
msgid "Then start the server:"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:52
msgid "In a separate terminal, use :command:`curl` to access it:"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:76
msgid "HTTP POST"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:78
msgid ""
"Supporting POST requests is a little more work, because the base class "
"does not parse the form data for us. The :mod:`cgi` module provides the "
":class:`FieldStorage` class which knows how to parse the form, if it is "
"given the correct inputs."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:87
msgid ""
":command:`curl` can include form data in the message it posts to the "
"server. The last argument, ``-F datafile=@BaseHTTPServer_GET.py``, posts "
"the contents of the file ``BaseHTTPServer_GET.py`` to illustrate reading "
"file data from the form."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:104
msgid "Threading and Forking"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:106
msgid ""
":class:`HTTPServer` is a simple subclass of "
":class:`SocketServer.TCPServer`, and does not use multiple threads or "
"processes to handle requests. To add threading or forking, create a new "
"class using the appropriate mix-in from :mod:`SocketServer`."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:115
msgid ""
"Each time a request comes in, a new thread or process is created to "
"handle it:"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:127
msgid ""
"Swapping :class:`ForkingMixIn` for :class:`ThreadingMixIn` above would "
"achieve similar results, using separate processes instead of threads."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:131
msgid "Handling Errors"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:133
msgid ""
"Error handling is made easy with :meth:`send_error()`. Simply pass the "
"appropriate error code and an optional error message, and the entire "
"response (with headers, status code, and body) is generated "
"automatically."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:142
msgid "In this case, a 404 error is always returned."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:164
msgid "Setting Headers"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:166
msgid ""
"The :mod:`send_header` method adds header data to the HTTP response. It "
"takes two arguments, the name of the header and the value."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:173
msgid ""
"This example sets the ``Last-Modified`` header to the current timestamp "
"formatted according to :rfc:`2822`."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:190
msgid "`BaseHTTPServer <http://docs.python.org/library/basehttpserver.html>`_"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:190
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:193
msgid ":mod:`SocketServer`"
msgstr ""

#: ../../src/PyMOTW/BaseHTTPServer/index.rst:193
msgid ""
"The SocketServer module provides the base class which handles the raw "
"socket connection."
msgstr ""

