# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/optparse/index.rst:3
msgid "optparse -- Command line option parser to replace getopt."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:8
msgid "Command line option parser to replace :mod:`getopt`."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:9
msgid "2.3"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:11
msgid ""
"The :mod:`optparse` module is a modern alternative for command line "
"option parsing that offers several features not available in "
":mod:`getopt`, including type conversion, option callbacks, and automatic"
" help generation. There are many more features to :mod:`optparse` than "
"can be covered here, but this section will introduce some of the more "
"commonly used capabilities."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:19
msgid "Creating an OptionParser"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:21
msgid ""
"There are two phases to parsing options with :mod:`optparse`. First, the "
":class:`OptionParser` instance is constructed and configured with the "
"expected options. Then a sequence of options is fed in and processed."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:31
msgid ""
"Usually, once the parser has been created, each option is added to the "
"parser explicitly, with information about what to do when the option is "
"encountered on the command line. It is also possible to pass a list of "
"options to the :class:`OptionParser` constructor, but that form is not "
"used as frequently."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:38
msgid "Defining Options"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:40
msgid ""
"Options should be added one at a time using the :func:`add_option()` "
"method. Any un-named string arguments at the beginning of the argument "
"list are treated as option names. To create aliases for an option (i.e., "
"to have a short and long form of the same option), simply pass multiple "
"names."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:47
msgid "Parsing a Command Line"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:49
msgid ""
"After all of the options are defined, the command line is parsed by "
"passing a sequence of argument strings to :func:`parse_args()`. By "
"default, the arguments are taken from ``sys.argv[1:]``, but a list can be"
" passed explicitly as well. The options are processed using the GNU/POSIX"
" syntax, so option and argument values can be mixed in the sequence."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:56
msgid ""
"The return value from :func:`parse_args()` is a two-part tuple containing"
" an :class:`Values` instance and the list of arguments to the command "
"that were not interpreted as options. The default processing action for "
"options is to store the value using the name given in the *dest* argument"
" to :func:`add_option`.  The :class:`Values` instance returned by "
":func:`parse_args` holds the option values as attributes, so if an "
"option's :data:`dest` is set to ``\"myoption\"``, the value is accessed "
"as ``options.myoption``."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:66
msgid "Short and Long-Form Options"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:68
msgid ""
"Here is a simple example with three different options: a boolean option "
"(``-a``), a simple string option (``-b``), and an integer option "
"(``-c``)."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:77
msgid ""
"The options on the command line are parsed with the same rules that "
":func:`getopt.gnu_getopt()` uses, so there are two ways to pass values to"
" single character options. The example above uses both forms, ``-bval`` "
"and ``-c val``."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:94
msgid ""
"Notice that the type of the value associated with ``'c'`` in the output "
"is an integer, since the :class:`OptionParser` was told to convert the "
"argument before storing it."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:98
msgid ""
"Unlike with :mod:`getopt`, \"long\" option names are not handled any "
"differently by :mod:`optparse`:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:105
msgid "And the results are similar:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:120
msgid "Comparing with getopt"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:122
msgid ""
"Since :mod:`optparse` is supposed to replace :mod:`getopt`, this example "
"re-implements the same example program used in the section about "
":mod:`getopt`:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:130
msgid ""
"Notice how the options ``-o`` and ``--output`` are aliased by being added"
" at the same time. Either option can be used on the command line. The "
"short form:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:150
msgid "or the long form:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:169
msgid "Any unique prefix of the long option can also be used:"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:189
msgid "Option Values"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:191
msgid ""
"The default processing action is to store the argument to the option. If "
"a type is provided, the argument value is converted to that type before "
"it is stored."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:196
msgid "Setting Defaults"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:198
msgid ""
"Since options are by definition optional, applications should establish "
"default behavior when an option is not given on the command line.  A "
"default value for an individual option can be provided when the option is"
" defined."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:224
msgid ""
"Defaults can also be loaded after the options are defined using keyword "
"arguments to :func:`set_defaults`."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:231
msgid ""
"This form is useful when loading defaults from a configuration file or "
"other source, instead of hard-coding them."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:251
msgid ""
"All defined options are available as attributes of the :class:`Values` "
"instance returned by :func:`parse_args` so applications do not need to "
"check for the presence of an option before trying to use its value."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:259
msgid ""
"If no default value is given for an option, and the option is not "
"specified on the command line, its value is ``None``."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:281
msgid "Type Conversion"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:283
msgid ""
":mod:`optparse` will convert option values from strings to integers, "
"floats, longs, and complex values.  To enable the conversion, specify the"
" *type* of the option as an argument to :func:`add_option`."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:291
msgid ""
"If an option's value cannot be converted to the specified type, an error "
"is printed and the program exits."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:316
msgid ""
"Custom conversions can be created by subclassing the :class:`Option` "
"class.  See the standard library documentation for complete details."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:320
msgid "Enumerations"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:322
msgid ""
"The :const:`choice` type provides validation using a list of candidate "
"strings.  Set *type* to choice and provide the list of valid values using"
" the *choices* argument to :func:`add_option`."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:330
msgid ""
"Invalid inputs result in an error message that shows the allowed list of "
"values."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:359
msgid "Option Actions"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:361
msgid ""
"Unlike :mod:`getopt`, which only *parses* the options, :mod:`optparse` is"
" a full option *processing* library. Options can trigger different "
"actions, specified by the action argument to :func:`add_option()`. "
"Supported actions include storing the argument (singly, or as part of a "
"list), storing a constant value when the option is encountered (including"
" special handling for true/false values for boolean switches), counting "
"the number of times an option is seen, and calling a callback.  The "
"default action is :const:`store`, and does not need to be specified "
"explicitly."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:372
msgid "Constants"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:374
msgid ""
"When options represent a selection of fixed alternatives, such as "
"operating modes of an application, creating separate explicit options "
"makes it easier to document them.  The :const:`store_const` action is "
"intended for this purpose."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:383
msgid ""
"The :const:`store_const` action associates a constant value in the "
"application with the option specified by the user.  Several options can "
"be configured to store different constant values to the same *dest* name,"
" so the application only has to check a single setting."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:407
msgid "Boolean Flags"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:409
msgid ""
"Boolean options are implemented using special actions for storing true "
"and false constant values."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:416
msgid ""
"True and false versions of the same flag can be created by configuring "
"their *dest* name to the same value."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:443
msgid "Repeating Options"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:445
msgid ""
"There are three ways to handle repeated options.  The default is to "
"overwrite any existing value so that the last option specified is used.  "
"The :const:`store` action works this way."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:449
msgid ""
"Using the :const:`append` action, it is possible to accumulate values as "
"an option is repeated, creating a list of values.  Append mode is useful "
"when multiple responses are allowed, and specifying them separately is "
"easier for the user than constructing a parsable syntax."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:458
msgid ""
"The order of the values given on the command line is preserved, in case "
"it is important for the application."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:483
msgid ""
"Sometimes it is enough to know how many times an option was given, and "
"the associated value is not needed.  For example, many applications allow"
" the user to repeat the ``-v`` option to increase the level of verbosity "
"of their output.  The :const:`count` action increments a value each time "
"the option appears."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:493
msgid ""
"Since the ``-v`` option doesn't take an argument, it can be repeated "
"using the syntax ``-vv`` as well as through separate individual options."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:531
msgid "Callbacks"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:533
msgid ""
"Beside saving the arguments for options directly, it is possible to "
"define callback functions to be invoked when the option is encountered on"
" the command line. Callbacks for options take four arguments: the "
":class:`Option` instance causing the callback, the option string from the"
" command line, any argument value associated with the option, and the "
":class:`OptionParser` instance doing the parsing work."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:544
msgid ""
"In this example, the ``--with`` option is configured to take a string "
"argument (other types such as integers and floats are support as well)."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:569
msgid ""
"Callbacks can be configured to take multiple arguments using the *nargs* "
"option."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:577
msgid ""
"In this case, the arguments are passed to the callback function as a "
"tuple via the value argument."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:597
msgid "Help Messages"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:599
msgid ""
"The :class:`OptionParser` automatically includes a help option to all "
"option sets, so the user can pass ``--help`` on the command line to see "
"instructions for running the program. The help message includes all of "
"the options with an indication of whether or not they take an argument. "
"It is also possible to pass help text to :class:`add_option()` to give a "
"more verbose description of an option."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:611
msgid ""
"The options are listed in alphabetical order, with aliases included on "
"the same line. When the option takes an argument, the ``dest`` name is "
"included as an argument name in the help output. The help text is printed"
" in the right column."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:633
msgid ""
"The name ``WITH`` printed with the option ``--with`` comes from the "
"destination variable for the option.  For cases where the internal "
"variable name is descriptive enough to serve in the documentation, the "
"*metavar* argument can be used to set a different name."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:642
msgid ""
"The value is printed exactly as it is given, without any changes to "
"capitalization or punctuation."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:664
msgid "Organizing Options"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:666
msgid ""
"Many applications include sets of related options.  For example, "
":command:`rpm` includes separate options for each of its operating modes."
"  :mod:`optparse` uses *option groups* to organize options in the help "
"output.  The option values are all still saved in a single "
":class:`Values` instance, so the namespace for option names is still "
"flat."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:677
msgid ""
"Each group has its own section title and description, and the options are"
" displayed together."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:711
msgid "Application Settings"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:713
msgid ""
"The automatic help generation facilities support configuration settings "
"to control several aspects of the help output.  The program's *usage* "
"string, which shows how the positional arguments are expected, can be set"
" when the :class:`OptionParser` is created."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:722
msgid ""
"The literal value ``%prog`` is expanded to the name of the program at "
"runtime, so it can reflect the full path to the script.  If the script is"
" run by :command:`python`, instead of running directly, the script name "
"is used."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:745
msgid "The program name can be changed using the *prog* argument."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:751
msgid ""
"It is generally a bad idea to hard-code the program name in this way, "
"though, because if the program is renamed the help will not reflect the "
"change."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:773
msgid ""
"The application version can be set using the *version* argument.  When a "
"value is provided, :mod:`optparse` automatically adds a ``--version`` "
"option to the parser."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:781
msgid ""
"When the user runs the program with the ``--version`` option, "
":mod:`optparse` prints the version string and then exits."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:808
msgid "`optparse <http://docs.python.org/lib/module-optparse.html>`_"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:808
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:811
msgid ":mod:`getopt`"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:811
msgid "The getopt module, replaced by optparse."
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:813
msgid ":mod:`argparse`"
msgstr ""

#: ../../src/PyMOTW/optparse/index.rst:814
msgid "Newer replacement for optparse."
msgstr ""

