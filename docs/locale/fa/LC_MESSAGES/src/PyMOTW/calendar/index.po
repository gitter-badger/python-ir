# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/calendar/index.rst:3
msgid "calendar -- Work with dates"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:8
msgid ""
"The calendar module implements classes for working with dates to manage "
"year/month/week oriented values."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:9
msgid "1.4, with updates in 2.5"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:11
msgid ""
"The calendar module defines the Calendar class, which encapsulates "
"calculations for values such as the dates of the weeks in a given month "
"or year. In addition, the TextCalendar and HTMLCalendar classes can "
"produce pre-formatted output."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:17
msgid "Formatting Examples"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:19
msgid ""
"A very simple example which produces formatted text output for a month "
"using TextCalendar might use the prmonth() method."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:26
msgid ""
"The example configures TextCalendar to start weeks on Sunday, following "
"the American convention. The default is to use the European convention of"
" starting a week on Monday."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:30
msgid "The output looks like:"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:51
msgid ""
"The HTML output for the same time period is slightly different, since "
"there is no prmonth() method:"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:58
msgid ""
"The rendered output looks roughly the same, but is wrapped with HTML "
"tags.  You can also see that each table cell has a class attribute "
"corresponding to the day of the week."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:81
msgid ""
"If you need to produce output in a format other than one of the available"
" defaults, you can use :mod:`calendar` to calculate the dates and "
"organize the values into week and month ranges, then iterate over the "
"result yourself. The weekheader(), monthcalendar(), and "
"yeardays2calendar() methods of Calendar are especially useful for that "
"sort of work."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:87
msgid ""
"Calling yeardays2calendar() produces a sequence of \"month row\" lists. "
"Each list includes the months as another list of weeks. The weeks are "
"lists of tuples made up of day number (1-31) and weekday number (0-6). "
"Days that fall outside of the month have a day number of 0."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:96
msgid ""
"Calling yeardays2calendar(2007, 2) returns data for 2007, organized with "
"2 months per row."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:173
msgid "This is equivalent to the data used by formatyear()"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:179
msgid "which for the same arguments produces output like:"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:244
msgid ""
"If you want to format the output yourself for some reason (such as "
"including links in HTML output), you will find the day_name, day_abbr, "
"month_name, and month_abbr module attributes useful. They are "
"automatically configured correctly for the current locale."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:250
msgid "Calculating Dates"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:252
msgid ""
"Although the calendar module focuses mostly on printing full calendars in"
" various formats, it also provides functions useful for working with "
"dates in other ways, such as calculating dates for a recurring event. For"
" example, the Python Atlanta User's Group meets the 2nd Thursday of every"
" month. To calculate the dates for the meetings for a year, you could use"
" the return value of monthcalendar()."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:263
msgid ""
"Notice that some days are 0. Those are days of the week that overlap with"
" the given month but which are part of another month."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:284
msgid ""
"As mentioned earlier, the first day of the week is Monday. It is possible"
" to change that by calling setfirstweekday(). On the other hand, since "
"the calendar module includes constants for indexing into the date ranges "
"returned by monthcalendar(), it is more convenient to skip that step in "
"this case."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:289
msgid ""
"To calculate the PyATL meeting dates for 2007, assuming the second "
"Thursday of every month, we can use the 0 values to tell us whether the "
"Thursday of the first week is included in the month (or if the month "
"starts, for example on a Friday)."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:298
msgid "So the PyATL meeting schedule for the year is:"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:327
msgid "`calendar <http://docs.python.org/library/calendar.html>`_"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:327
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:330
msgid ":mod:`time`"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:330
msgid "Lower-level time functions."
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:332
msgid ":mod:`datetime`"
msgstr ""

#: ../../src/PyMOTW/calendar/index.rst:333
msgid "Manipulate date values, including timestamps and time zones."
msgstr ""

