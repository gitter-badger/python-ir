# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/EasyDialogs/index.rst:3
msgid "EasyDialogs -- Carbon dialogs for Mac OS X"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:8
msgid "Provides simple interfaces to Carbon dialogs from Python."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:9
msgid ""
"At least 2.0, Macintosh-only (see References below for a Windows "
"implementation)"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:11
msgid ""
"The EasyDialogs module includes classes and functions for working with "
"simple message and prompt dialogs, as well as stock dialogs for querying "
"the user for file or directory names. The dialogs use the Carbon API. See"
" Apple's `Navigation Services Reference`_ for more details about some of "
"the options not covered in detail here."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:18
msgid "Messages"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:20
msgid ""
"A simple Message function displays modal dialog containing a text message"
" for the user."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:29
msgid ""
"It is easy to change the label of the \"OK\" button using the ``ok`` "
"argument."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:39
msgid "ProgressBar"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:41
msgid ""
"The ProgressBar class manages a modeless dialog with a progress meter. It"
" can operate in determinate (when you know how much work there is to be "
"done) or indeterminate (when you want to show that your app is working, "
"but do not know how much work needs to be done) modes. The constructor "
"takes arguments for the dialog title, the maximum value, and a label to "
"describe the current phase of operation."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:48
msgid ""
"In determinate mode, set the maxval argument to the number of steps, "
"amount of data to download, etc. Then use the incr() method to step the "
"progress from 0 to maxval."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:80
msgid ""
"Explicitly deleting the ProgressBar instance using ``del`` removes it "
"from the screen."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:83
msgid ""
"If you are measuring progress in uneven steps, use ``set()`` to change "
"the progress meter instead of ``incr()``."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:94
msgid "Simple Prompts"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:96
msgid ""
"EasyDialogs also lets you ask the user for information. Use AskString to "
"display a modal dialog to prompt the user for a simple string."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:105
msgid ""
"The return value depends on the user's response. It is either the text "
"they enter:"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:113
msgid "or None if they press the Cancel button."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:121
msgid ""
"The string response has a length limit of 254 characters. If the value "
"entered is longer than that, it is truncated."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:138
msgid "Passwords"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:140
msgid ""
"Use AskPassword to prompt the user for secret values that should not be "
"echoed back to the screen in clear-text."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:154
msgid "The Ok/Cancel behavior for AskPassword is the same as AskString."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:157
msgid "Files and Directories"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:159
msgid ""
"There are special functions for requesting file or directory names. These"
" use the native file selector dialogs, so the user does not have to type "
"in the paths. For example, to ask the user which file to open, use "
"AskFileForOpen."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:167
msgid ""
"The wanted=unicode argument tells AskFileForOpen to return the name of "
"the file as a unicode string. The other possible return types include "
"ASCII string, and some Apple data structures for working with file "
"references."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:171
msgid ""
"By specifing defaultLocation, this example initializes the dialog to the "
"current working directory. The user is still free to navigate around the "
"filesystem."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:175
msgid ""
"Other options to AskFileForOpen let you filter the values displayed, "
"control the type codes of files visible to the user, and interact with "
"the dialog through callbacks. Refer to the module documentation and "
"Apple's reference guide for more details."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:187
msgid ""
"To prompt the user to provide a new filename when saving a file, use "
"AskFileForSave."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:201
msgid ""
"If you need the user to select a directory, existing or new, use "
"AskFolder. The dialog includes a button to let them create a new folder."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:216
msgid "GetArgv"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:218
msgid ""
"An unusually complex dialog, GetArgv lets the user build a command line "
"string by selecting options from menus. It uses a variation of the getopt"
" syntax to describe the valid options, and returns a list of strings that"
" can be parsed by getopt. In my research this week, I found some scripts "
"that use GetArgv if the user does not specify arguments on the command "
"line."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:224
msgid ""
"Let's look at an example that builds a command using the options "
"supported by the Python interpreter."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:233
msgid ""
"The first argument is a list of tuples containing the option specifier "
"and a text description. The specifier can contain a single letter for "
"simple boolean switches; a letter followed by colon (\":\") or equals "
"sign (\"=\") for single letter options that take an argument; several "
"letters for long-form switches (\"opt\" translates to \"--opt\"); or "
"several letters followed by colon or equal sign for long options taking "
"an argument. The option description is a string displayed in the dialog."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:243
msgid ""
"The dialog is divided into 4 sections. At the top is the list of options "
"you specified. The user can select an option from the list. If the option"
" takes an argument, a text field is displayed so the user can provide a "
"value. The Add button inserts the selected option into the command line "
"field at the bottom of the dialog."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:251
msgid ""
"The second argument to GetArgv is a list of commands and descriptions. "
"The user can select a command to be included in the argument list from "
"the menu in the middle of the dialog."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:257
msgid ""
"The arguments addoldfile, addnewfile, and addfolder control the "
"sensitivity of the buttons in the third section of the dialog. In this "
"example, only the Add file... button is enabled because the Python "
"interpreter does not take directories or missing files as arguments."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:262
msgid ""
"At the bottom of the dialog is the command line being constructed by the "
"user. When they press OK, GetArgv returns a list of all of the options "
"that looks like sys.argv."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:274
msgid "`EasyDialogs <http://docs.python.org/library/easydialogs.html>`_"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:274
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:277
msgid "`Navigation Services Reference`_"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:277
msgid ""
"Documentation for Apple's API for working with file objects under Mac OS "
"X."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:280
msgid ""
"`EasyDialogs for Windows "
"<http://www.averdevelopment.com/python/EasyDialogs.html>`_"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:280
msgid "A version of this module that runs under Windows."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:283
msgid "`optparse-gui <http://code.google.com/p/optparse-gui/>`_"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:283
msgid "A replacement for GetArgv that works with :mod:`optparse` instead."
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:285
msgid "`EasyGui <http://easygui.sourceforge.net/>`_"
msgstr ""

#: ../../src/PyMOTW/EasyDialogs/index.rst:286
msgid "A similar portable library for creating simple graphical user interfaces."
msgstr ""

