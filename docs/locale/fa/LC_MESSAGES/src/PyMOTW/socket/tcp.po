# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/socket/tcp.rst:3
msgid "TCP/IP Client and Server"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:5
msgid ""
"Sockets can be configured to act as a *server* and listen for incoming "
"messages, or connect to other applications as a *client*.  After both "
"ends of a TCP/IP socket are connected, communication is bi-directional."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:11
msgid "Echo Server"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:13
msgid ""
"This sample program, based on the one in the standard library "
"documentation, receives incoming messages and echos them back to the "
"sender.  It starts by creating a TCP/IP socket."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:20
msgid ""
"Then :func:`bind` is used to associate the socket with the server "
"address.  In this case, the address is ``localhost``, referring to the "
"current server, and the port number is 10000."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:27
msgid ""
"Calling :func:`listen` puts the socket into server mode, and "
":func:`accept` waits for an incoming connection."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:33
msgid ""
":func:`accept` returns an open connection between the server and client, "
"along with the address of the client.  The connection is actually a "
"different socket on another port (assigned by the kernel). Data is read "
"from the connection with :func:`recv` and transmitted with "
":func:`sendall`."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:42
msgid ""
"When communication with a client is finished, the connection needs to be "
"cleaned up using :func:`close`.  This example uses a ``try:finally`` "
"block to ensure that :func:`close` is always called, even in the event of"
" an error."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:48
msgid "Echo Client"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:50
msgid ""
"The client program sets up its :class:`socket` differently from the way a"
" server does.  Instead of binding to a port and listening, it uses "
":func:`connect` to attach the socket directly to the remote address."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:58
msgid ""
"After the connection is established, data can be sent through the "
":class:`socket` with :func:`sendall` and received with :func:`recv`, just"
" as in the server."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:65
msgid ""
"When the entire message is sent and a copy received, the socket is closed"
" to free up the port."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:69
msgid "Client and Server Together"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:71
msgid ""
"The client and server should be run in separate terminal windows, so they"
" can communicate with each other.  The server output is:"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:91
msgid "The client output is:"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:108
msgid "Easy Client Connections"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:110
msgid ""
"TCP/IP clients can save a few steps by using the convenience function "
":func:`create_connection` to connect to a server.  The function takes one"
" argument, a two-value tuple containing the address of the server, and "
"derives the best address to use for the connection."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:119
msgid ""
":func:`create_connection` uses :func:`getaddrinfo` to find candidate "
"connection parameters, and returns a :class:`socket` opened with the "
"first configuration that creates a successful connection.  The "
":attr:`family`, :attr:`type`, and :attr:`proto` attributes can be "
"examined to determine the type of :class:`socket` being returned."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:140
msgid "Choosing an Address for Listening"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:142
msgid ""
"It is important to bind a server to the correct address, so that clients "
"can communicate with it.  The previous examples all used ``'localhost'`` "
"as the IP address, which limits connections to clients running on the "
"same server.  Use a public address of the server, such as the value "
"returned by :func:`gethostname`, to allow other hosts to connect.  This "
"example modifies the echo server to listen on an address specified via a "
"command line argument."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:154
msgid ""
"A similar modification to the client program is needed before the server "
"can be tested."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:161
msgid ""
"After starting the server with the argument ``farnsworth.hellfly.net``, "
"the :command:`netstat` command shows it listening on the address for the "
"named host."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:180
msgid ""
"Running the the client on another host, passing "
"``farnsworth.hellfly.net`` as the host where the server is running, "
"produces:"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:198
msgid "And the server output is:"
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:213
msgid ""
"Many servers have more than one network interface, and therefore more "
"than one IP address.  Rather than running separate copies of a service "
"bound to each IP address, use the special address :const:`INADDR_ANY` to "
"listen on all addresses at the same time.  Although :mod:`socket` defines"
" a constant for :const:`INADDR_ANY`, it is an integer value and must be "
"converted to a dotted-notation string address before it can be passed to "
":func:`bind`.  As a shortcut, use the empty string ``''`` instead of "
"doing the conversion."
msgstr ""

#: ../../src/PyMOTW/socket/tcp.rst:226
msgid ""
"To see the actual address being used by a socket, call its "
":func:`getsockname` method.  After starting the service, running "
":command:`netstat` again shows it listening for incoming connections on "
"any address."
msgstr ""

