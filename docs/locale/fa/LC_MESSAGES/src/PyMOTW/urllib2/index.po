# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/urllib2/index.rst:3
msgid "urllib2 -- Library for opening URLs."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:8
msgid ""
"A library for opening URLs that can be extended by defining custom "
"protocol handlers."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:9
msgid "2.1"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:11
msgid ""
"The :mod:`urllib2` module provides an updated API for using internet "
"resources identified by URLs.  It is designed to be extended by "
"individual applications to support new protocols or add variations to "
"existing protocols (such as handling HTTP basic authentication)."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:17
msgid "HTTP GET"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:21
msgid ""
"The test server for these examples is in BaseHTTPServer_GET.py, from the "
"PyMOTW examples for :mod:`BaseHTTPServer`. Start the server in one "
"terminal window, then run these examples in another."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:25
msgid ""
"As with :mod:`urllib`, an HTTP GET operation is the simplest use of "
":mod:`urllib2`. Pass the URL to :func:`urlopen()` to get a \"file-like\" "
"handle to the remote data."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:33
msgid ""
"The example server accepts the incoming values and formats a plain text "
"response to send back. The return value from :func:`urlopen()` gives "
"access to the headers from the HTTP server through the :func:`info()` "
"method, and the data for the remote resource via methods like "
":func:`read()` and :func:`readlines()`."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:73
msgid "The file-like object returned by :func:`urlopen()` is iterable:"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:79
msgid ""
"This example strips the trailing newlines and carriage returns before "
"printing the output."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:105
msgid "Encoding Arguments"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:107
msgid ""
"Arguments can be passed to the server by encoding them with "
":ref:`urllib.urlencode() <urllib-urlencode>` and appending them to the "
"URL."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:115
msgid ""
"The list of client values returned in the example output contains the "
"encoded query arguments."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:143
msgid "HTTP POST"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:147
msgid ""
"The test server for these examples is in BaseHTTPServer_POST.py, from the"
" PyMOTW examples for the :mod:`BaseHTTPServer`. Start the server in one "
"terminal window, then run these examples in another."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:151
msgid ""
"To POST form-encoded data to the remote server, instead of using GET, "
"pass the encoded query arguments as data to :func:`urlopen()`."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:158
msgid ""
"The server can decode the form data and access the individual values by "
"name."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:173
msgid "Working with Requests Directly"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:175
msgid ""
":func:`urlopen()` is a convenience function that hides some of the "
"details of how the request is made and handled for you. For more precise "
"control, you may want to instantiate and use a :class:`Request` object "
"directly."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:181
msgid "Adding Outgoing Headers"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:183
msgid ""
"As the examples above illustrate, the default *User-agent* header value "
"is made up of the constant ``Python-urllib``, followed by the Python "
"interpreter version. If you are creating an application that will access "
"other people's web resources, it is courteous to include real user agent "
"information in your requests, so they can identify the source of the hits"
" more easily. Using a custom agent also allows them to control crawlers "
"using a ``robots.txt`` file (see :mod:`robotparser`)."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:196
msgid ""
"After creating a :class:`Request` object, use :func:`add_header()` to set"
" the user agent value before opening the request.  The last line of the "
"output shows our custom value."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:224
msgid "Posting Form Data"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:226
msgid ""
"You can set the outgoing data on the :class:`Request` to post it to the "
"server."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:233
msgid ""
"The HTTP method used by the :class:`Request` changes from GET to POST "
"automatically after the data is added."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:255
msgid ""
"Although the method is :func:`add_data()`, its effect is *not* "
"cumulative.  Each call replaces the previous data."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:260
msgid "Uploading Files"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:262
msgid ""
"Encoding files for upload requires a little more work than simple forms."
"  A complete MIME message needs to be constructed in the body of the "
"request, so that the server can distinguish incoming form fields from "
"uploaded files."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:270
msgid ""
"The :class:`MultiPartForm` class can represent an arbitrary form as a "
"multi-part MIME message with attached files."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:306
msgid "Custom Protocol Handlers"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:308
msgid ""
":mod:`urllib2` has built-in support for HTTP(S), FTP, and local file "
"access. If you need to add support for other URL types, you can register "
"your own protocol handler to be invoked as needed. For example, if you "
"want to support URLs pointing to arbitrary files on remote NFS servers, "
"without requiring your users to mount the path manually, would create a "
"class derived from :class:`BaseHandler` and with a method "
":func:`nfs_open()`."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:316
msgid ""
"The protocol :func:`open()` method takes a single argument, the "
":class:`Request` instance, and it should return an object with a "
":func:`read()` method that can be used to read the data, an "
":func:`info()` method to return the response headers, and "
":func:`geturl()` to return the actual URL of the file being read. A "
"simple way to achieve that is to create an instance of "
":class:`urllib.addurlinfo`, passing the headers, URL, and open file "
"handle in to the constructor."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:329
msgid ""
"The :class:`FauxNFSHandler` and :class:`NFSFile` classes print messages "
"to illustrate where a real implementation would add mount and unmount "
"calls. Since this is just a simulation, :class:`FauxNFSHandler` is primed"
" with the name of a temporary directory where it should look for all of "
"its files."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:359
msgid "`urllib2 <http://docs.python.org/library/urllib2.html>`_"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:359
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:362
msgid ":mod:`urllib`"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:362
msgid "Original URL handling library."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:365
msgid ":mod:`urlparse`"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:365
msgid "Work with the URL string itself."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:368
msgid ""
"`urllib2 -- The Missing Manual "
"<http://www.voidspace.org.uk/python/articles/urllib2.shtml>`_"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:368
msgid "Michael Foord's write-up on using urllib2."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:372
msgid "`Upload Scripts <http://www.voidspace.org.uk/python/cgi.shtml#upload>`_"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:371
msgid ""
"Example scripts from Michael Foord that illustrate how to upload a file "
"using HTTP and then receive the data on the server."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:376
msgid ""
"`HTTP client to POST using multipart/form-data "
"<http://code.activestate.com/recipes/146306/>`_"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:375
msgid ""
"Python cookbook recipe showing how to encode and post data, including "
"files, over HTTP."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:379
msgid ""
"`Form content types <http://www.w3.org/TR/REC-"
"html40/interact/forms.html#h-17.13.4>`_"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:379
msgid ""
"W3C specification for posting files or large amounts of data via HTTP "
"forms."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:382
msgid ":mod:`mimetypes`"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:382
msgid "Map filenames to mimetype."
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:384
msgid ":mod:`mimetools`"
msgstr ""

#: ../../src/PyMOTW/urllib2/index.rst:385
msgid "Tools for parsing MIME messages."
msgstr ""

