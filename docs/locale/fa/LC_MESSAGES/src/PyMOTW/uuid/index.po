# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/uuid/index.rst:3
msgid "uuid -- Universally unique identifiers"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:8
msgid ""
"The :mod:`uuid` module implements Universally Unique Identifiers as "
"described in :rfc:`4122`."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:9
msgid "2.5 and later"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:11
msgid ""
":rfc:`4122` defines a system for creating universally unique identifiers "
"for resources in a way that does not require a central registrar. UUID "
"values are 128 bits long and \"can guarantee uniqueness across space and "
"time\". They are useful for identifiers for documents, hosts, application"
" clients, and other situations where a unique value is necessary. The RFC"
" is specifically geared toward creating a Uniform Resource Name "
"namespace."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:19
msgid "Three main algorithms are covered by the spec:"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:21
msgid "Using IEEE 802 MAC addresses as a source of uniqueness"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:22
msgid "Using pseudo-random numbers"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:23
msgid "Using well-known strings combined with cryptographic hashing"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:25
msgid ""
"In all cases the seed value is combined with the system clock and a clock"
" sequence value (to maintain uniqueness in case the clock was set "
"backwards)."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:30
msgid "UUID 1 - IEEE 802 MAC Address"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:32
msgid ""
"UUID version 1 values are computed using the MAC address of the host. The"
" :mod:`uuid` module uses :func:`getnode()` to retrieve the MAC value on a"
" given system:"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:53
msgid ""
"If a system has more than one network card, and so more than one MAC, any"
" one of the values may be returned."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:56
msgid ""
"To generate a UUID for a given host, identified by its MAC address, use "
"the :func:`uuid1()` function. You can pass a node identifier, or leave "
"the field blank to use the value returned by :func:`getnode()`."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:66
msgid ""
"The components of the UUID object returned can be accessed through read-"
"only instance attributes. Some attributes, such as *hex*, *int*, and "
"*urn*, are different representations of the UUID value."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:98
msgid ""
"Because of the time component, each time :func:`uuid1()` is called a new "
"value is returned."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:106
msgid ""
"Notice in this output that only the time component (at the beginning of "
"the string) changes."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:123
msgid ""
"Because your computer has a different MAC address than mine, you will see"
" entirely different values if you run the examples, because the node "
"identifier at the end of the UUID will change, too."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:146
msgid "UUID 3 and 5 - Name-Based Values"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:148
msgid ""
"It is also useful in some contexts to create UUID values from names "
"instead of random or time-based values. Versions 3 and 5 of the UUID "
"specification use cryptographic hash values (MD5 or SHA-1) to combine "
"namespace-specific seed values with \"names\" (DNS hostnames, URLs, "
"object ids, etc.). There are several well-known namespaces, identified by"
" pre-defined UUID values, for working with DNS, URLs, ISO OIDs, and X.500"
" Distinguished Names. You can also define your own application- specific "
"namespaces by generating and saving UUID values."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:157
msgid ""
"To create a UUID from a DNS name, pass ``uuid.NAMESPACE_DNS`` as the "
"namespace argument to :func:`uuid3()` or :func:`uuid5()`:"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:181
msgid ""
"The UUID value for a given name in a namespace is always the same, no "
"matter when or where it is calculated. Values for the same name in "
"different namespaces are different."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:205
msgid "UUID 4 - Random Values"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:207
msgid ""
"Sometimes host-based and namespace-based UUID values are not \"different "
"enough\". For example, in cases where you want to use the UUID as a "
"lookup key, a more random sequence of values with more differentiation is"
" desirable to avoid collisions in a hash table. Having values with fewer "
"common digits also makes it easier to find them in log files. To add "
"greater differentiation in your UUIDs, use :func:`uuid4()` to generate "
"them using random input values."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:235
msgid "Working with UUID Objects"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:237
msgid ""
"In addition to generating new UUID values, you can parse strings in "
"various formats to create UUID objects. This makes it easier to compare "
"them, sort them, etc."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:274
msgid "`uuid <http://docs.python.org/lib/module-uuid.html>`_"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:274
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:276
msgid ":rfc:`4122`"
msgstr ""

#: ../../src/PyMOTW/uuid/index.rst:277
msgid "A Universally Unique IDentifier (UUID) URN Namespace"
msgstr ""

