# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/datetime/index.rst:3
msgid "datetime -- Date/time value manipulation"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:8
msgid ""
"The datetime module includes functions and classes for doing date and "
"time parsing, formatting, and arithmetic."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:9
msgid "2.3 and later"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:11
msgid ""
":mod:`datetime` contains functions and classes for working with dates and"
" times, separatley and together."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:15
msgid "Times"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:17
msgid ""
"Time values are represented with the :class:`time` class. Times have "
"attributes for hour, minute, second, and microsecond. They can also "
"include time zone information. The arguments to initialize a "
":class:`time` instance are optional, but the default of ``0`` is unlikely"
" to be what you want."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:44
msgid ""
"A time instance only holds values of time, and not a date associated with"
" the time."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:51
msgid ""
"The *min* and *max* class attributes reflect the valid range of times in "
"a single day."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:68
msgid "The resolution for time is limited to whole microseconds."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:74
msgid ""
"In fact, using floating point numbers for the microsecond argument "
"generates a :ref:`TypeError <exceptions-TypeError>`."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:94
msgid "Dates"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:96
msgid ""
"Calendar date values are represented with the :class:`date` class. "
"Instances have attributes for year, month, and day. It is easy to create "
"a date representing today's date using the :func:`today()` class method."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:105
msgid "This example prints the current date in several formats:"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:125
msgid ""
"There are also class methods for creating instances from integers (using "
"proleptic Gregorian ordinal values, which starts counting from Jan. 1 of "
"the year 1) or POSIX timestamp values."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:133
msgid ""
"This example illustrates the different value types used by "
":func:`fromordinal()` and :func:`fromtimestamp()`."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:151
msgid ""
"As with :class:`time`, the range of date values supported can be "
"determined using the *min* and *max* attributes."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:158
msgid "The resolution for dates is whole days."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:174
msgid ""
"Another way to create new date instances uses the :func:`replace()` "
"method of an existing date. For example, you can change the year, leaving"
" the day and month alone."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:196
msgid "timedeltas"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:198
msgid ""
"Using :func:`replace()` is not the only way to calculate future/past "
"dates. You can use :mod:`datetime` to perform basic arithmetic on date "
"values via the :class:`timedelta` class. Subtracting dates produces a "
":class:`timedelta`, and a :class:`timedelta` can be added or subtracted "
"from a date to produce another date. The internal values for a "
":class:`timedelta` are stored in days, seconds, and microseconds."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:210
msgid ""
"Intermediate level values passed to the constructor are converted into "
"days, seconds, and microseconds."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:233
msgid "Date Arithmetic"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:235
msgid ""
"Date math uses the standard arithmetic operators. This example with date "
"objects illustrates using :class:`timedelta` objects to compute new "
"dates, and subtracting date instances to produce timedeltas (including a "
"negative delta value)."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:262
msgid "Comparing Values"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:264
msgid ""
"Both date and time values can be compared using the standard operators to"
" determine which is earlier or later."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:291
msgid "Combining Dates and Times"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:293
msgid ""
"Use the :class:`datetime` class to hold values consisting of both date "
"and time components. As with :class:`date`, there are several convenient "
"class methods to make creating :class:`datetime` instances from other "
"common values."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:302
msgid ""
"As you might expect, the :class:`datetime` instance has all of the "
"attributes of both a date and a time object."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:326
msgid ""
"Just as with date, datetime provides convenient class methods for "
"creating new instances. It also includes :func:`fromordinal()` and "
":func:`fromtimestamp()`. In addition, :func:`combine()` can be useful if "
"you already have a date instance and time instance and want to create a "
"datetime."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:351
msgid "Formatting and Parsing"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:353
msgid ""
"The default string representation of a datetime object uses the `ISO "
"8601`_ format (``YYYY-MM-DDTHH:MM:SS.mmmmmm``). Alternate formats can be "
"generated using :func:`strftime()`. Similarly, if your input data "
"includes timestamp values parsable with :func:`time.strptime()`, then "
":func:`datetime.strptime()` is a convenient way to convert them to "
"datetime instances."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:379
msgid "Time Zones"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:381
msgid ""
"Within :mod:`datetime`, time zones are represented by subclasses of "
":class:`tzinfo`. Since :class:`tzinfo` is an abstract base class, you "
"need to define a subclass and provide appropriate implementations for a "
"few methods to make it useful. Unfortunately, :mod:`datetime` does not "
"include any actual implementations ready to be used, although the "
"documentation does provide a few sample implementations. Refer to the "
"standard library documentation page for examples using fixed offsets as "
"well as a DST-aware class and more details about creating your own class."
"  pytz_ is also a good source for time zone implementation details."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:395
msgid "`datetime <http://docs.python.org/lib/module-datetime.html>`_"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:395
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:398
msgid ":mod:`calendar`"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:398
msgid "The :mod:`calendar` module."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:401
msgid ":mod:`time`"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:401
msgid "The :mod:`time` module."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:404
msgid "`dateutil <http://labix.org/python-dateutil>`_"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:404
msgid "dateutil from Labix extends the datetime module with additional features."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:407
msgid ""
"`WikiPedia: Proleptic Gregorian calendar "
"<http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar>`_"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:407
msgid "A description of the Gregorian calendar system."
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:410
msgid "pytz_"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:410
msgid "World Time Zone database"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:412
msgid "`ISO 8601`_"
msgstr ""

#: ../../src/PyMOTW/datetime/index.rst:413
msgid "The standard for numeric representation of Dates and Time"
msgstr ""

