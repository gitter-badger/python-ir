# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/commands/index.rst:3
msgid "commands -- Run external shell commands"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:8
msgid ""
"The commands module contains utility functions for working with shell "
"command output under Unix."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:9
msgid "1.4"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:13
msgid "This module is made obsolete by the :mod:`subprocess` module."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:15
msgid ""
"There are 3 functions in the commands module for working with external "
"commands. The functions are shell-aware and return the output or status "
"code from the command."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:20
msgid "getstatusoutput()"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:22
msgid ""
"The function getstatusoutput() runs a command via the shell and returns "
"the exit code and the text output (stdout and stderr combined). The exit "
"codes are the same as for the C function wait() or os.wait(). The code is"
" a 16-bit number. The low byte contains the signal number that killed the"
" process. When the signal is zero, the high byte is the exit status of "
"the program. If a core file was produced, the high bit of the low byte is"
" set."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:33
msgid ""
"This example runs two commands that exit normally, a third meant to "
"generate a core dump, and a fourth that blocks waiting to be killed from "
"another shell. (Don't simply use Ctrl-C as the interpreter will intercept"
" that signal. Use ps and grep in another window to find the read process "
"and send it a signal with kill.)"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:75
msgid ""
"In this example, I used ``kill -HUP $PID`` to kill the reading process "
"from a separate shell window, so the signal is reported as ``1``."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:79
msgid "getoutput()"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:81
msgid ""
"If the exit code is not useful for your application, you can use "
"getoutput() to receive only the text output from the command."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:102
msgid "getstatus()"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:104
msgid ""
"Contrary to what you might expect, getstatus() does not run a command and"
" return the status code. Instead, it's argument is a filename which is "
"combined with \"ls -ld\" to build a command to be run by getoutput(). The"
" text output of the command is returned."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:113
msgid ""
"As you notice from the output, the $ character in the argument to the "
"last call is escaped so the environment variable name is not expanded."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:126
msgid "`commands <http://docs.python.org/library/commands.html>`_"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:126
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:128
msgid ":mod:`signal`"
msgstr ""

#: ../../src/PyMOTW/commands/index.rst:129
msgid "Defines constants for signals such as HUP (``1``)."
msgstr ""

