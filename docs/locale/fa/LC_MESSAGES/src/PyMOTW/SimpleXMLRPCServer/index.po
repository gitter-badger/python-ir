# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:3
msgid "SimpleXMLRPCServer -- Implements an XML-RPC server."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:8
msgid "Implements an XML-RPC server."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:9
msgid "2.2 and later"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:11
msgid ""
"The :mod:`SimpleXMLRPCServer` module contains classes for creating your "
"own cross-platform, language-independent server using the XML-RPC "
"protocol. Client libraries exist for many other languages, making XML-RPC"
" an easy choice for building RPC-style services."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:18
msgid ""
"All of the examples provided here include a client module as well to "
"interact with the demonstration server. If you want to download the code "
"and run the examples, you will want to use 2 separate shell windows, one "
"for the server and one for the client."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:24
msgid "A Simple Server"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:26
msgid ""
"This simple server example exposes a single function that takes the name "
"of a directory and returns the contents. The first step is to create the "
":class:`SimpleXMLRPCServer` instance and tell it where to listen for "
"incoming requests ('localhost' port 9000 in this case). Then we define a "
"function to be part of the service, and register the function so the "
"server knows how to call it. The final step is to put the server into an "
"infinite loop receiving and responding to requests."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:39
msgid ""
"The server can be accessed at the URL http://localhost:9000 using "
":mod:`xmlrpclib`.  This client code illustrates how to call the "
":func:`list_contents()` service from Python."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:47
msgid ""
"Notice that we simply connect the :class:`ServerProxy` to the server "
"using its base URL, and then call methods directly on the proxy. Each "
"method invoked on the proxy is translated into a request to the server. "
"The arguments are formatted using XML, and then POSTed to the server. The"
" server unpacks the XML and figures out what function to call based on "
"the method name invoked from the client. The arguments are passed to the "
"function, and the return value is translated back to XML to be returned "
"to the client."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:56
msgid "Starting the server gives::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:61
msgid ""
"Running the client in a second window shows the contents of my ``/tmp`` "
"directory::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:70
msgid ""
"and after the request is finished, log output appears in the server "
"window::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:78
msgid ""
"The first line of output is from the ``logging.debug()`` call inside "
":func:`list_contents()`. The second line is from the server logging the "
"request because *logRequests* is ``True``."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:83
msgid "Alternate Names"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:85
msgid ""
"Sometimes the function names you use inside your modules or libraries are"
" not the names you want to use in your external API. You might need to "
"load a platform-specific implementation, build the service API "
"dynamically based on a configuration file, or replace real functions with"
" stubs for testing. If you want to register a function with an alternate "
"name, pass the name as the second argument to "
":func:`register_function()`, like this:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:97
msgid ""
"The client should now use the name ``dir()`` instead of "
"``list_contents()``:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:104
msgid ""
"Calling ``list_contents()`` results in an error, since the server no "
"longer has a handler registered by that name."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:129
msgid "Dotted Names"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:131
msgid ""
"Individual functions can be registered with names that are not normally "
"legal for Python identifiers. For example, you can include '.' in your "
"names to separate the namespace in the service. This example extends our "
"\"directory\" service to add \"create\" and \"remove\" calls. All of the "
"functions are registered using the prefix \"``dir.``\" so that the same "
"server can provide other services using a different prefix. One other "
"difference in this example is that some of the functions return ``None``,"
" so we have to tell the server to translate the ``None`` values to a nil "
"value (see `XML-RPC Extensions`_)."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:146
msgid ""
"To call the service functions in the client, simply refer to them with "
"the dotted name, like so:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:153
msgid ""
"and (assuming you don't have a ``/tmp/EXAMPLE`` file on your system) the "
"output for the sample client script looks like::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:165
msgid "Arbitrary Names"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:167
msgid ""
"A less useful, but potentially interesting feature is the ability to "
"register functions with names that are otherwise invalid attribute names."
" This example service registers a function with the name \"``multiply "
"args``\"."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:175
msgid ""
"Since the registered name contains a space, we can't use dot notation to "
"access it directly from the proxy. We can, however, use ``getattr()``."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:183
msgid ""
"You should avoid creating services with names like this, though.  This "
"example is provided not necessarily because it is a good idea, but "
"because you may encounter existing services with arbitrary names and need"
" to be able to call them."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:195
msgid "Exposing Methods of Objects"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:197
msgid ""
"The earlier sections talked about techniques for establishing APIs using "
"good naming conventions and namespacing. Another way to incorporate "
"namespacing into your API is to use instances of classes and expose their"
" methods. We can recreate the first example using an instance with a "
"single method."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:207
msgid "A client can call the method directly:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:213
msgid "and receive output like::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:221
msgid ""
"We've lost the \"``dir.``\" prefix for the service, though, so let's "
"define a class to let us set up a service tree that can be invoked from "
"clients."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:229
msgid ""
"By registering the instance of :class:`ServiceRoot` with "
"*allow_dotted_names* enabled, we give the server permission to walk the "
"tree of objects when a request comes in to find the named method using "
"``getattr()``."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:245
msgid "Dispatching Calls Yourself"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:247
msgid ""
"By default, :func:`register_instance()` finds all callable attributes of "
"the instance with names not starting with '``_``' and registers them with"
" their name. If you want to be more careful about the exposed methods, "
"you could provide your own dispatching logic. For example:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:256
msgid ""
"The :func:`public()` method of :class:`MyService` is marked as exposed to"
" the XML-RPC service while :func:`private()` is not. The "
":func:`_dispatch()` method is invoked when the client tries to access a "
"function that is part of :class:`MyService`. It first enforces the use of"
" a prefix (\"``prefix.``\" in this case, but you can use any string).  "
"Then it requires the function to have an attribute called *exposed* with "
"a true value. The exposed flag is set on a function using a decorator for"
" convenience."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:265
msgid "Here are a few sample client calls:"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:271
msgid ""
"and the resulting output, with the expected error messages trapped and "
"reported::"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:279
msgid ""
"There are several other ways to override the dispatching mechanism, "
"including subclassing directly from SimpleXMLRPCServer. Check out the "
"docstrings in the module for more details."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:285
msgid "Introspection API"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:287
msgid ""
"As with many network services, it is possible to query an XML-RPC server "
"to ask it what methods it supports and learn how to use them. "
":class:`SimpleXMLRPCServer` includes a set of public methods for "
"performing this introspection. By default they are turned off, but can be"
" enabled with :func:`register_introspection_functions()`. You can add "
"explicit support for :func:`system.listMethods()` and "
":func:`system.methodHelp()` by defining :func:`_listMethods()` and "
":func:`_methodHelp()` on your service class. For example,"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:300
msgid ""
"In this case, the convenience function :func:`list_public_methods()` "
"scans an instance to return the names of callable attributes that do not "
"start with '``_``'. You can redefine :func:`_listMethods()` to apply "
"whatever rules you like.  Similarly, for this basic example "
":func:`_methodHelp()` returns the docstring of the function, but could be"
" written to build a help string from another source."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:307
msgid ""
"This client queries the server and reports on all of the publicly "
"callable methods."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:314
msgid "Notice that the system methods are included in the results."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:355
msgid ""
"`SimpleXMLRPCServer <http://docs.python.org/lib/module-"
"SimpleXMLRPCServer.html>`_"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:355
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:359
msgid "`XML-RPC How To <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:358
msgid ""
"Describes how to use XML-RPC to implement clients and servers in a "
"variety of languages."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:362
msgid "`XML-RPC Extensions`_"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:362
msgid "Specifies an extension to the XML-RPC protocol."
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:364
msgid ":mod:`xmlrpclib`"
msgstr ""

#: ../../src/PyMOTW/SimpleXMLRPCServer/index.rst:365
msgid "XML-RPC client library"
msgstr ""

