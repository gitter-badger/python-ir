# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/zipimport/index.rst:5
msgid "zipimport -- Load Python code from inside ZIP archives"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:10
msgid "Load Python code from inside ZIP archives."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:11
msgid "2.3 and later"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:13
msgid ""
"The :mod:`zipimport` module implements the :class:`zipimporter` class, "
"which can be used to find and load Python modules inside ZIP archives. "
"The :class:`zipimporter` supports the \"import hooks\" API specified in "
":pep:`302`; this is how Python Eggs work."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:18
msgid ""
"You probably won't need to use the :mod:`zipimport` module directly, "
"since it is possible to import directly from a ZIP archive as long as "
"that archive appears in your :ref:`sys.path <sys-path>`. However, it is "
"interesting to see the features available."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:24
msgid "Example"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:26
msgid ""
"For the examples this week, I'll reuse some of the code from last week's "
"discussion of zipfile to create an example ZIP archive containing some "
"Python modules. If you are experimenting with the sample code on your "
"system, run ``zipimport_make_example.py`` before any of the rest of the "
"examples. It will create a ZIP archive containing all of the modules in "
"the example directory, along with some test data needed for the code "
"below."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:68
msgid "Finding a Module"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:70
msgid ""
"Given the full name of a module, :func:`find_module()` will try to locate"
" that module inside the ZIP archive."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:77
msgid ""
"If the module is found, the :class:`zipimporter` instance is returned. "
"Otherwise, ``None`` is returned."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:96
msgid "Accessing Code"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:98
msgid ""
"The :func:`get_code()` method loads the code object for a module from the"
" archive."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:105
msgid "The code object is not the same as a module object."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:121
msgid "To load the code as a usable module, use :func:`load_module()` instead."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:128
msgid ""
"The result is a module object as though the code had been loaded from a "
"regular import:"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:149
msgid "Source"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:151
msgid ""
"As with the :mod:`inspect` module, it is possible to retrieve the source "
"code for a module from the ZIP archive, if the archive includes the "
"source. In the case of the example, only ``zipimport_get_source.py`` is "
"added to ``zipimport_example.zip`` (the rest of the modules are just "
"added as the .pyc files)."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:161
msgid ""
"If the source for a module is not available, :func:`get_source()` returns"
" ``None``."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:208
msgid "Packages"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:210
msgid ""
"To determine if a name refers to a package instead of a regular module, "
"use :func:`is_package()`."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:217
msgid ""
"In this case, ``zipimport_is_package`` came from a module and the "
"``example_package`` is a package."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:236
msgid "Data"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:238
msgid ""
"There are times when source modules or packages need to be distributed "
"with non-code data. Images, configuration files, default data, and test "
"fixtures are just a few examples of this. Frequently, the module "
"``__path__`` attribute is used to find these data files relative to where"
" the code is installed."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:244
msgid "For example, with a normal module you might do something like:"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:251
msgid ""
"The output will look something like this, with the path changed based on "
"where the PyMOTW sample code is on your filesystem."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:272
msgid ""
"If the ``example_package`` is imported from the ZIP archive instead of "
"the filesystem, that method does not work:"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:279
msgid ""
"The ``__file__`` of the package refers to the ZIP archive, and not a "
"directory. So we cannot just build up the path to the ``README.txt`` "
"file."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:301
msgid ""
"Instead, we need to use the :func:`get_data()` method. We can access "
":class:`zipimporter` instance which loaded the module through the "
"``__loader__`` attribute of the imported module:"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:327
msgid ""
"The ``__loader__`` is not set for modules not imported via "
":mod:`zipimport`."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:333
msgid "`zipimport <http://docs.python.org/lib/module-zipimport.html>`_"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:333
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:336
msgid ":mod:`imp`"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:336
msgid "Other import-related functions."
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:339
msgid ":pep:`302`"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:339
msgid "New Import Hooks"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:341
msgid ":mod:`pkgutil`"
msgstr ""

#: ../../src/PyMOTW/zipimport/index.rst:342
msgid "Provides a more generic interface to :func:`get_data`."
msgstr ""

