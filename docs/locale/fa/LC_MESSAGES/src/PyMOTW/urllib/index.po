# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/urllib/index.rst:3
msgid "urllib -- simple interface for network resource access"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:8
msgid "Accessing remote resources that don't need authentication, cookies, etc."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:9
msgid "1.4 and later"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:11
msgid ""
"The :mod:`urllib` module provides a simple interface for network resource"
" access. Although :mod:`urllib` can be used with gopher and ftp, these "
"examples all use http."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:16
msgid "HTTP GET"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:20
msgid ""
"The test server for these examples is in BaseHTTPServer_GET.py, from the "
"PyMOTW examples for :mod:`BaseHTTPServer`. Start the server in one "
"terminal window, then run these examples in another."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:24
msgid ""
"An HTTP GET operation is the simplest use of urllib. Simply pass the URL "
"to :func:`urlopen()` to get a \"file-like\" handle to the remote data."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:33
msgid ""
"The example server takes the incoming values and formats a plain text "
"response to send back. The return value from :func:`urlopen()` gives "
"access to the headers from the HTTP server through the :func:`info()` "
"method, and the data for the remote resource via methods like "
":func:`read()` and :func:`readlines()`."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:67
msgid "The file-like object is also iterable:"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:74
msgid ""
"Since the lines are returned with newlines and carriage returns intact, "
"this example strips them before printing the output."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:96
msgid "Encoding Arguments"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:98
msgid ""
"Arguments can be passed to the server by encoding them and appending them"
" to the URL."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:105
msgid ""
"Notice that the query, in the list of client values, contains the encoded"
" query arguments."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:125
msgid ""
"To pass a sequence of values using separate occurrences of the variable "
"in the query string, set *doseq* to True when calling "
":func:`urlencode()`."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:140
msgid ""
"To decode the query string, see the :class:`FieldStorage` class from the "
":mod:`cgi` module."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:143
msgid ""
"Special characters within the query arguments that might cause parse "
"problems with the URL on the server side are \"quoted\" when passed to "
":func:`urlencode()`. To quote them locally to make safe versions of the "
"strings, you can use the :func:`quote()` or :func:`quote_plus()` "
"functions directly."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:153
msgid ""
"Notice that :func:`quote_plus()` is more aggressive about the characters "
"it replaces."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:171
msgid ""
"To reverse the quote operations, use :func:`unquote()` or "
":func:`unquote_plus()`, as appropriate."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:193
msgid "HTTP POST"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:197
msgid ""
"The test server for these examples is in BaseHTTPServer_POST.py, from the"
" PyMOTW examples for the :mod:`BaseHTTPServer`. Start the server in one "
"terminal window, then run these examples in another."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:201
msgid ""
"To POST data to the remote server, instead of using GET, pass the encoded"
" query arguments as data to :func:`urlopen()` instead of appending them "
"to the URL."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:219
msgid ""
"You can send any byte-string as data, in case the server expects "
"something other than url-encoded form arguments in the posted data."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:223
msgid "Paths vs. URLs"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:225
msgid ""
"Some operating systems use different values for separating the components"
" of paths in local files than URLs. To make your code portable, you "
"should use the functions :func:`pathname2url()` and "
":func:`url2pathname()` to convert back and forth. Since I am working on a"
" Mac, I have to explicitly import the Windows versions of the functions. "
"Using the versions of the functions exported by :mod:`urllib` gives you "
"the correct defaults for your platform, so you do not need to do this."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:239
msgid ""
"There are two Windows examples, with and without the drive letter at the "
"prefix of the path."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:269
msgid "Simple Retrieval with Cache"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:271
msgid ""
"Retrieving data is a common operation, and :mod:`urllib` includes the "
":func:`urlretrieve()` function so you don't have to write your own. "
":func:`urlretrieve()` takes arguments for the URL, a temporary file to "
"hold the data, a function to report on download progress, and data to "
"pass if the URL refers to a form where data should be POSTed. If no "
"filename is given, :func:`urlretrieve()` creates a temporary file. You "
"can delete the file yourself, or treat the file as a cache and use "
":func:`urlcleanup()` to remove it."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:280
msgid "This example uses GET to retrieve some data from a web server:"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:287
msgid ""
"Since the server does not return a ``Content-length`` header, "
":func:`urlretrieve()` does not know how big the data should be, and "
"passes -1 as the *total_size* argument to :func:`reporthook()`."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:331
msgid "URLopener"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:333
msgid ""
":mod:`urllib` provides a :class:`URLopener` base class, and "
":class:`FancyURLopener` with default handling for the supported "
"protocols. If you find yourself needing to change their behavior, you are"
" probably better off looking at the :mod:`urllib2` module, added in "
"Python 2.1."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:342
msgid "`urllib <http://docs.python.org/lib/module-urllib.html>`_"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:342
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:345
msgid ":mod:`urllib2`"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:345
msgid "Updated API for working with URL-based services."
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:347
msgid ":mod:`urlparse`"
msgstr ""

#: ../../src/PyMOTW/urllib/index.rst:348
msgid "Parse URL values to access their components."
msgstr ""

