# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/hashlib/index.rst:3
msgid "hashlib -- Cryptographic hashes and message digests"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:8
msgid "Cryptographic hashes and message digests"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:9
msgid "2.5"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:11
msgid ""
"The :mod:`hashlib` module deprecates the separate :mod:`md5` and "
":mod:`sha` modules and makes their API consistent. To work with a "
"specific hash algorithm, use the appropriate constructor function to "
"create a hash object. Then you can use the same API to interact with the "
"hash no matter what algorithm is being used."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:17
msgid ""
"Since :mod:`hashlib` is \"backed\" by OpenSSL, all of of the algorithms "
"provided by that library are available, including:"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:20
msgid "md5"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:21
msgid "sha1"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:22
msgid "sha224"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:23
msgid "sha256"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:24
msgid "sha384"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:25
msgid "sha512"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:28
msgid "Sample Data"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:30
msgid "All of the examples below use the same sample data:"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:38
msgid "MD5 Example"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:40
msgid ""
"To calculate the MD5 digest for a block of data (here an ASCII string), "
"create the hash object, add the data, and compute the digest."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:47
msgid ""
"This example uses the :func:`hexdigest()` method instead of "
":func:`digest()` because the output is formatted to be printed. If a "
"binary digest value is acceptable, you can use :func:`digest()`."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:64
msgid "SHA1 Example"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:66
msgid "A SHA1 digest for the same data would be calculated in much the same way."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:72
msgid ""
"The digest value is different in this example because we changed the "
"algorithm from MD5 to SHA1"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:89
msgid "new()"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:91
msgid ""
"Sometimes it is more convenient to refer to the algorithm by name in a "
"string rather than by using the constructor function directly. It is "
"useful, for example, to be able to store the hash type in a configuration"
" file. In those cases, use :func:`new()` to create a hash calculator."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:101
msgid "When run with a variety of arguments:"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:132
msgid "Calling update() more than once"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:134
msgid ""
"The :func:`update()` method of the hash calculators can be called "
"repeatedly. Each time, the digest is updated based on the additional text"
" fed in. This can be much more efficient than reading an entire file into"
" memory, for example."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:143
msgid ""
"This example is a little contrived because it works with such a small "
"amount of text, but it illustrates how you could incrementally update a "
"digest as data is read or otherwise produced."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:164
msgid "`hashlib <http://docs.python.org/library/hashlib.html>`_"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:164
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:167
msgid ""
"`Voidspace: IronPython and hashlib "
"<http://www.voidspace.org.uk/python/weblog/arch_d7_2006_10_07.shtml#e497>`_"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:167
msgid "A wrapper for :mod:`hashlib` that works with IronPython."
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:169
msgid ":mod:`hmac`"
msgstr ""

#: ../../src/PyMOTW/hashlib/index.rst:170
msgid "The :mod:`hmac` module."
msgstr ""

