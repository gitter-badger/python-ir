# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/atexit/index.rst:3
msgid "atexit -- Call functions when a program is closing down"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:8
msgid "Register function(s) to be called when a program is closing down."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:9
msgid "2.1.3 and later"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:11
msgid ""
"The atexit module provides a simple interface to register functions to be"
" called when a program closes down normally. The sys module also provides"
" a hook, sys.exitfunc, but only one function can be registered there. The"
" atexit registry can be used by multiple modules and libraries "
"simultaneously."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:17
msgid "Examples"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:19
msgid ""
"A simple example of registering a function via atexit.register() looks "
"like:"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:25
msgid ""
"Since the program doesn't do anything else, all_done() is called right "
"away:"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:41
msgid ""
"It is also possible to register more than one function, and to pass "
"arguments. That can be useful to cleanly disconnect from databases, "
"remove temporary files, etc. Since it is possible to pass arguments to "
"the registered functions, we don't even need to keep a separate list of "
"things to clean up -- we can just register a clean up function more than "
"once."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:51
msgid ""
"Notice that order in which the exit functions are called is the reverse "
"of the order they are registered. This allows modules to be cleaned up in"
" the reverse order from which they are imported (and therefore register "
"their atexit functions), which should reduce dependency conflicts."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:71
msgid "When are atexit functions not called?"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:73
msgid "The callbacks registered with atexit are not invoked if:"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:75
msgid "the program dies because of a signal"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:77
msgid "os._exit() is invoked directly"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:79
msgid "a Python fatal error is detected (in the interpreter)"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:81
msgid ""
"To illustrate a program being killed via a signal, we can modify one of "
"the examples from the :mod:`subprocess` article. There are 2 files "
"involved, the parent and the child programs. The parent starts the child,"
" pauses, then kills it:"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:91
msgid "The child sets up an atexit callback, to prove that it is not called."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:98
msgid "When run, the output should look something like this:"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:115
msgid "Note that the child does not print the message embedded in not_called()."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:117
msgid ""
"Similarly, if a program bypasses the normal exit path it can avoid having"
" the atexit callbacks invoked."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:125
msgid ""
"Since we call os._exit() instead of exiting normally, the callback is not"
" invoked."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:140
msgid ""
"If we had instead used sys.exit(), the callbacks would still have been "
"called."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:162
msgid ""
"Simulating a fatal error in the Python interpreter is left as an exercise"
" to the reader."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:166
msgid "Exceptions in atexit Callbacks"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:168
msgid ""
"Tracebacks for exceptions raised in atexit callbacks are printed to the "
"console and the last exception raised is re-raised to be the final error "
"message of the program."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:176
msgid ""
"Notice again that the registration order controls the execution order. If"
" an error in one callback introduces an error in another (registered "
"earlier, but called later), the final error message might not be the most"
" useful error message to show the user."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:214
msgid ""
"In general you will probably want to handle and quietly log all "
"exceptions in your cleanup functions, since it is messy to have a program"
" dump errors on exit."
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:220
msgid "`atexit <http://docs.python.org/library/atexit.html>`_"
msgstr ""

#: ../../src/PyMOTW/atexit/index.rst:221
msgid "The standard library documentation for this module."
msgstr ""

