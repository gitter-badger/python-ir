# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/StringIO/index.rst:3
msgid "StringIO and cStringIO -- Work with text buffers using file-like API"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:11
msgid "Work with text buffers using file-like API"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:12
msgid "StringIO: 1.4, cStringIO: 1.5"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:14
msgid ""
":class:`StringIO` provides a convenient means of working with text in "
"memory using the file API (read, write. etc.). There are two separate "
"implementations. The :mod:`cStringIO` version is written in C for speed, "
"while :mod:`StringIO` is written in Python for portability. Using "
":mod:`cStringIO` to build large strings can offer performance savings "
"over some other string conctatenation techniques."
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:22
msgid "Example"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:24
msgid ""
"Here are some pretty standard, simple, examples of using "
":class:`StringIO` buffers:"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:31
msgid ""
"This example uses :func:`read()`, but the :func:`readline()` and "
":func:`readlines()` methods are also available. The :class:`StringIO` "
"class also provides a :func:`seek()` method so it is possible to jump "
"around in a buffer while reading, which can be useful for rewinding if "
"you are using some sort of look-ahead parsing algorithm."
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:51
msgid ""
"Real world applications of :mod:`StringIO` include a web application "
"stack where various parts of the stack may add text to the response, or "
"testing the output generated by parts of a program which typically write "
"to a file."
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:56
msgid ""
"The application we are building at work includes a shell scripting "
"interface in the form of several command line programs. Some of these "
"programs are responsible for pulling data from the database and dumping "
"it on the console (either to show the user, or so the text can serve as "
"input to another command). The commands share a set of formatter plugins "
"to produce a text representation of an object in a variety of ways (XML, "
"bash syntax, human readable, etc.). Since the formatters normally write "
"to standard output, testing the results would be a little tricky without "
"the StringIO module. Using StringIO to intercept the output of the "
"formatter gives us an easy way to collect the output in memory to compare"
" against expected results."
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:72
msgid "`StringIO <http://docs.python.org/lib/module-StringIO.html>`_"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:72
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:75
msgid ""
"`The StringIO module ::: www.effbot.org "
"<http://effbot.org/librarybook/stringio.htm>`_"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:75
msgid "effbot's examples with StringIO"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:77
#, python-format
msgid ""
"`Efficient String Concatenation in Python "
"<http://www.skymind.com/%7Eocrow/python_string/>`_"
msgstr ""

#: ../../src/PyMOTW/StringIO/index.rst:78
msgid "Examines various methods of combining strings and their relative merits."
msgstr ""

