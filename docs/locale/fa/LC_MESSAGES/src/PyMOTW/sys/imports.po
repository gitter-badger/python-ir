# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/sys/imports.rst:5
msgid "Modules and Imports"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:7
msgid ""
"Most Python programs end up as a combination of several modules with a "
"main application importing them. Whether using the features of the "
"standard library, or organizing custom code in separate files to make it "
"easier to maintain, understanding and managing the dependencies for a "
"program is an important aspect of development. :mod:`sys` includes "
"information about the modules available to an application, either as "
"built-ins or after being imported.  It also defines hooks for overriding "
"the standard import behavior for special cases."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:19
msgid "Imported Modules"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:21
msgid ""
":data:`sys.modules` is a dictionary mapping the names of imported modules"
" to the module object holding the code."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:28
msgid "The contents of :data:`sys.modules` change as new modules are imported."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:50
msgid "Built-in Modules"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:52
msgid ""
"The Python interpreter can be compiled with some C modules built right "
"in, so they do not need to be distributed as separate shared libraries. "
"These modules don't appear in the list of imported modules managed in "
":data:`sys.modules` because they were not technically imported. The only "
"way to find the available built-in modules is through "
":data:`sys.builtin_module_names`."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:63
msgid ""
"The output of this script will vary, especially if run with a custom-"
"built version of the interpreter.  This output was created using a copy "
"of the interpreter installed from the standard python.org installer for "
"OS X."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:101
msgid ""
"`Build instructions "
"<http://svn.python.org/view/python/trunk/README?view=markup>`_"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:102
msgid ""
"Instructions for building Python, from the README distributed with the "
"source."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:107
msgid "Import Path"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:109
msgid ""
"The search path for modules is managed as a Python list saved in "
":data:`sys.path`. The default contents of the path include the directory "
"of the script used to start the application and the current working "
"directory."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:118
msgid ""
"The first directory in the search path is the home for the sample script "
"itself. That is followed by a series of platform-specific paths where "
"compiled extension modules (written in C) might be installed, and then "
"the global ``site-packages`` directory is listed last."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:135
msgid ""
"The import search path list can be modified before starting the "
"interpreter by setting the shell variable :data:`PYTHONPATH` to a colon-"
"separated list of directories."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:152
msgid ""
"A program can also modify its path by adding elements to :data:`sys.path`"
" directly."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:159
msgid ""
"Reloading an imported module re-imports the file, and uses the same "
":class:`module` object to hold the results.  Changing the path between "
"the initial import and the call to :func:`reload` means a different "
"module may be loaded the second time."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:182
msgid "Custom Importers"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:184
msgid ""
"Modifying the search path lets a programmer control how standard Python "
"modules are found, but what if a program needs to import code from "
"somewhere other than the usual ``.py`` or ``.pyc`` files on the "
"filesystem? :pep:`302` solves this problem by introducing the idea of "
"*import hooks* that can trap an attempt to find a module on the search "
"path and take alternative measures to load the code from somewhere else "
"or apply pre-processing to it."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:193
msgid "Finders"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:195
msgid ""
"Custom importers are implemented in two separate phases. The *finder* is "
"responsible for locating a module and providing a *loader* to manage the "
"actual import. Adding a custom module finder is as simple as appending a "
"factory to the :data:`sys.path_hooks` list. On import, each part of the "
"path is given to a finder until one claims support (by not raising "
":ref:`ImportError <exceptions-ImportError>`). That finder is then "
"responsible for searching data storage represented by its path entry for "
"named modules."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:208
msgid ""
"This example illustrates how the finders are instantiated and queried. "
"The :class:`NoisyImportFinder` raises :ref:`ImportError <exceptions-"
"ImportError>` when instantiated with a path entry that does not match its"
" special trigger value, which is obviously not a real path on the "
"filesystem. This test prevents the :class:`NoisyImportFinder` from "
"breaking imports of real modules."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:232
msgid "Importing from a Shelve"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:234
msgid ""
"When the finder locates a module, it is responsible for returning a "
"*loader* capable of importing that module.  This example illustrates a "
"custom importer that saves its module contents in a database created by "
":mod:`shelve`."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:239
msgid ""
"The first step is to create a script to populate the shelf with a package"
" containing a sub-module and sub-package."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:246
msgid ""
"A real packaging script would read the contents from the filesystem, but "
"using hard-coded values is sufficient for a simple example like this."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:268
msgid ""
"Next, it needs to provide finder and loader classes that know how to look"
" in a shelf for the source of a module or package."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:275
msgid ""
"Now :class:`ShelveFinder` and :class:`ShelveLoader` can be used to import"
" code from a shelf. For example, importing the :mod:`package` created "
"above:"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:283
msgid ""
"The shelf is added to the import path the first time an import occurs "
"after the path is modified. The finder recognizes the shelf and returns a"
" loader, which is used for all imports from that shelf. The initial "
"package-level import creates a new module object and then execs the "
"source loaded from the shelf, using the new module as the namespace so "
"that names defined in the source are preserved as module-level "
"attributes."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:326
msgid "Packages"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:328
msgid "The loading of other modules and sub-packages proceeds in the same way."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:402
msgid "Reloading"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:404
msgid ""
"Reloading a module is handled slightly differently. Instead of creating a"
" new module object, the existing module is re-used."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:411
msgid ""
"By re-using the same object, existing references to the module are "
"preserved even if class or function definitions are modified by the "
"reload."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:447
msgid "Import Errors"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:449
msgid ""
"When a module cannot be located by any finder, :ref:`ImportError "
"<exceptions-ImportError>` is raised by the main import code."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:456
msgid "Other errors during the import are propagated."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:483
msgid "Package Data"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:485
msgid ""
"In addition to defining the API loading executable Python code, "
":pep:`302` defines an optional API for retrieving package data intended "
"for distributing data files, documentation, and other non-code resources "
"used by a package. By implementing :func:`get_data`, a loader can allow "
"calling applications to support retrieval of data associated with the "
"package without considering how the package is actually installed "
"(especially without assuming that the package is stored as files on a "
"filesystem)."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:498
msgid ""
":func:`get_data` takes a path based on the module or package that owns "
"the data, and returns the contents of the resource \"file\" as a string, "
"or raises :ref:`IOError <exceptions-IOError>` if the resource does not "
"exist."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:546
msgid ":mod:`pkgutil`"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:547
msgid "Includes :func:`get_data` for retrieving data from a package."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:550
msgid "Importer Cache"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:552
msgid ""
"Searching through all of the hooks each time a module is imported can "
"become expensive. To save time, :data:`sys.path_importer_cache` is "
"maintained as a mapping between a path entry and the loader that can use "
"the value to find modules."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:561
msgid ""
"A cache value of ``None`` means to use the default filesystem loader. "
"Each missing directory is associated with an :class:`imp.NullImporter` "
"instance, since modules cannot be imported from directories that do not "
"exist. In the example output below, several "
":class:`zipimport.zipimporter` instances are used to manage EGG files "
"found on the path."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:666
msgid "Meta Path"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:668
msgid ""
"The :data:`sys.meta_path` further extends the sources of potential "
"imports by allowing a finder to be searched *before* the regular "
":data:`sys.path` is scanned. The API for a finder on the meta-path is the"
" same as for a regular path. The difference is that the meta-finder is "
"not limited to a single entry in :data:`sys.path`, it can search anywhere"
" at all."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:679
msgid ""
"Each finder on the meta-path is interrogated before :data:`sys.path` is "
"searched, so there is always an opportunity to have a central importer "
"load modules without explicitly modifying :data:`sys.path`. Once the "
"module is \"found\", the loader API works in the same way as for regular "
"loaders (although this example is truncated for simplicity)."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:714
msgid ":pep:`302`"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:714
msgid "Import Hooks"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:717
msgid ":mod:`imp`"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:717
msgid "The imp module provides tools used by importers."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:720
msgid ":mod:`zipimport`"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:720
msgid "Implements importing Python modules from inside ZIP archives."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:723
msgid ":mod:`importlib`"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:723
msgid "Base classes and other tools for creating custom importers."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:726
msgid ""
"`The Quick Guide to Python Eggs "
"<http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:726
msgid "PEAK documentation for working with EGGs."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:729
msgid ""
"`Import this, that, and the other thing: custom importers "
"<http://us.pycon.org/2010/conference/talks/?filter=core>`_"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:729
msgid "Brett Cannon's PyCon 2010 presentation."
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:731
msgid ""
"`Python 3 stdlib module \"importlib\" "
"<http://docs.python.org/py3k/library/importlib.html>`_"
msgstr ""

#: ../../src/PyMOTW/sys/imports.rst:732
msgid ""
"Python 3.x includes abstract base classes that makes it easier to create "
"custom importers."
msgstr ""

