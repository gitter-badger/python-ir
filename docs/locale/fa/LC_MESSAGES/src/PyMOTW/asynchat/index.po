# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/asynchat/index.rst:3
msgid "asynchat -- Asynchronous protocol handler"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:8
msgid "Asynchronous network communication protocol handler"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:9
msgid "1.5.2 and later"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:11
msgid ""
"The :mod:`asynchat` module builds on :mod:`asyncore` to make it easier to"
" implement protocols based on passing messages back and forth between "
"server and client. The :class:`async_chat` class is an "
":class:`asyncore.dispatcher` subclass that receives data and looks for a "
"message terminator. Your subclass only needs to specify what to do when "
"data comes in and how to respond once the terminator is found. Outgoing "
"data is queued for transmission via FIFO objects managed by "
":class:`async_chat`."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:21
msgid "Message Terminators"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:23
msgid ""
"Incoming messages are broken up based on *terminators*, controlled for "
"each instance via :func:`set_terminator()`. There are three possible "
"configurations:"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:27
msgid ""
"If a string argument is passed to :func:`set_terminator()`, the message "
"is considered complete when that string appears in the input data."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:30
msgid ""
"If a numeric argument is passed, the message is considered complete when "
"that many bytes have been read."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:32
msgid ""
"If ``None`` is passed, message termination is not managed by "
":class:`async_chat`."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:35
msgid ""
"The :class:`EchoServer` example below uses both a simple string "
"terminator and a message length terminator, depending on the context of "
"the incoming data. The HTTP request handler example in the standard "
"library documentation offers another example of how to change the "
"terminator based on the context to differentiate between HTTP headers and"
" the HTTP POST request body."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:43
msgid "Server and Handler"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:45
msgid ""
"To make it easier to understand how :mod:`asynchat` is different from "
":mod:`asyncore`, the examples here duplicate the functionality of the "
":class:`EchoServer` example from the :mod:`asyncore` discussion. The same"
" pieces are needed: a server object to accept connections, handler "
"objects to deal with communication with each client, and client objects "
"to initiate the conversation."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:52
msgid ""
"The :class:`EchoServer` needed to work with :mod:`asynchat` is "
"essentially the same as the one created for the :mod:`asyncore` example, "
"with fewer :mod:`logging` calls because they are less interesting this "
"time around:"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:61
msgid ""
"The :class:`EchoHandler` is based on ``asynchat.async_chat`` instead of "
"the :class:`asyncore.dispatcher` this time around. It operates at a "
"slightly higher level of abstraction, so reading and writing are handled "
"automatically. The buffer needs to know four things:"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:66
msgid ""
"what to do with incoming data (by overriding "
":func:`handle_incoming_data()`)"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:68
msgid ""
"how to recognize the end of an incoming message (via "
":func:`set_terminator()`)"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:70
msgid ""
"what to do when a complete message is received (in "
":func:`found_terminator()`)"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:72
msgid "what data to send (using :func:`push()`)"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:74
msgid ""
"The example application has two operating modes. It is either waiting for"
" a command of the form ``ECHO length\\n``, or waiting for the data to be "
"echoed. The mode is toggled back and forth by setting an instance "
"variable *process_data* to the method to be invoked when the terminator "
"is found and then changing the terminator as appropriate."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:84
msgid ""
"Once the complete command is found, the handler switches to message-"
"processing mode and waits for the complete set of text to be received. "
"When all of the data is available, it is pushed onto the outgoing channel"
" and set up the handler to be closed once the data is sent."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:91
msgid "Client"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:93
msgid ""
"The client works in much the same way as the handler. As with the "
":mod:`asyncore` implementation, the message to be sent is an argument to "
"the client's constructor. When the socket connection is established, "
":func:`handle_connect()` is called so the client can send the command and"
" message data."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:99
msgid ""
"The command is pushed directly, but a special \"producer\" class is used "
"for the message text. The producer is polled for chunks of data to send "
"out over the network. When the producer returns an empty string, it is "
"assumed to be empty and writing stops."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:104
msgid ""
"The client expects just the message data in response, so it sets an "
"integer terminator and collects data in a list until the entire message "
"has been received."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:114
msgid "Putting It All Together"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:116
msgid ""
"The main program for this example sets up the client and server in the "
"same :mod:`asyncore` main loop."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:123
msgid ""
"Normally you would have them in separate processes, but this makes it "
"easier to show the combined output."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:184
msgid "`asynchat <http://docs.python.org/library/asynchat.html>`_"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:184
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:187
msgid ":mod:`asyncore`"
msgstr ""

#: ../../src/PyMOTW/asynchat/index.rst:187
msgid "The asyncore module implements an lower-level asynchronous I/O event loop."
msgstr ""

