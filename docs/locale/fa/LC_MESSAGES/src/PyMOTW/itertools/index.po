# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/itertools/index.rst:3
msgid "itertools -- Iterator functions for efficient looping"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:9
msgid ""
"The itertools module includes a set of functions for working with "
"iterable (sequence-like) data sets."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:11
msgid "2.3"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:13
msgid ""
"The functions provided are inspired by similar features of the \"lazy "
"functional programming language\" Haskell and SML. They are intended to "
"be fast and use memory efficiently, but also to be hooked together to "
"express more complicated iteration-based algorithms."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:18
msgid ""
"Iterator-based code may be preferred over code which uses lists for "
"several reasons. Since data is not produced from the iterator until it is"
" needed, all of the data is not stored in memory at the same time. "
"Reducing memory usage can reduce swapping and other side-effects of large"
" data sets, increasing performance."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:25
msgid "Merging and Splitting Iterators"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:27
msgid ""
"The ``chain()`` function takes several iterators as arguments and returns"
" a single iterator that produces the contents of all of them as though "
"they came from a single sequence."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:52
msgid ""
"``izip()`` returns an iterator that combines the elements of several "
"iterators into tuples. It works like the built-in function ``zip()``, "
"except that it returns an iterator instead of a list."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:74
msgid ""
"The ``islice()`` function returns an iterator which returns selected "
"items from the input iterator, by index. It takes the same arguments as "
"the slice operator for lists: start, stop, and step. The start and step "
"arguments are optional."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:117
msgid ""
"The ``tee()`` function returns several independent iterators (defaults to"
" 2) based on a single original input. It has semantics similar to the "
"Unix `tee <http://unixhelp.ed.ac.uk/CGI/man-cgi?tee>`__ utility, which "
"repeats the values it reads from its input and writes them to a named "
"file and standard output."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:148
msgid ""
"Since the new iterators created by ``tee()`` share the input, you should "
"not use the original iterator any more. If you do consume values from the"
" original input, the new iterators will not produce those values:"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:176
msgid "Converting Inputs"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:178
msgid ""
"The ``imap()`` function returns an iterator that calls a function on the "
"values in the input iterators, and returns the results. It works like the"
" built-in ``map()``, except that it stops when any input iterator is "
"exhausted (instead of inserting ``None`` values to completely consume all"
" of the inputs)."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:184
msgid ""
"In the first example, the lambda function multiplies the input values by "
"2. In a second example, the lambda function multiplies 2 arguments, taken"
" from separate iterators, and returns a tuple with the original arguments"
" and the computed value."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:217
msgid ""
"The ``starmap()`` function is similar to ``imap()``, but instead of "
"constructing a tuple from multiple iterators it splits up the items in a "
"single iterator as arguments to the mapping function using the ``*`` "
"syntax. Where the mapping function to imap() is called f(i1, i2), the "
"mapping function to starmap() is called ``f(*i)``."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:244
msgid "Producing New Values"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:246
msgid ""
"The ``count()`` function returns an interator that produces consecutive "
"integers, indefinitely. The first number can be passed as an argument, "
"the default is zero. There is no upper bound argument (see the built-in "
"``xrange()`` for more control over the result set). In this example, the "
"iteration stops because the list argument is consumed."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:271
msgid ""
"The ``cycle()`` function returns an iterator that repeats the contents of"
" the arguments it is given indefinitely. Since it has to remember the "
"entire contents of the input iterator, it may consume quite a bit of "
"memory if the iterator is long. In this example, a counter variable is "
"used to break out of the loop after a few cycles."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:301
msgid ""
"The ``repeat()`` function returns an iterator that produces the same "
"value each time it is accessed. It keeps going forever, unless the "
"optional times argument is provided to limit it."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:325
msgid ""
"It is useful to combine ``repeat()`` with ``izip()`` or ``imap()`` when "
"invariant values need to be included with the values from the other "
"iterators."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:371
msgid "Filtering"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:373
msgid ""
"The ``dropwhile()`` function returns an iterator that returns elements of"
" the input iterator after a condition becomes false for the first time. "
"It does not filter every item of the input; after the condition is false "
"the first time, all of the remaining items in the input are returned."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:404
msgid ""
"The opposite of ``dropwhile()``, ``takewhile()`` returns an iterator that"
" returns items from the input iterator as long as the test function "
"returns true."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:431
msgid ""
"``ifilter()`` returns an iterator that works like the built-in "
"``filter()`` does for lists, including only items for which the test "
"function returns true. It is different from ``dropwhile()`` in that every"
" item is tested before it is returned."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:463
msgid ""
"The opposite of ``ifilter()``, ``ifilterfalse()`` returns an iterator "
"that includes only items where the test function returns false."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:497
msgid "Grouping Data"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:499
msgid ""
"The ``groupby()`` function returns an iterator that produces sets of "
"values grouped by a common key."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:502
msgid ""
"This example from the standard library documentation shows how to group "
"keys in a dictionary which have the same value:"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:524
msgid ""
"This more complicated example illustrates grouping related values based "
"on some attribute. Notice that the input sequence needs to be sorted on "
"the key in order for the groupings to work out as expected."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:569
msgid "`itertools <http://docs.python.org/library/itertools.html>`_"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:569
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:572
msgid "`The Standard ML Basis Library <http://www.standardml.org/Basis/>`_"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:572
msgid "The library for SML."
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:574
msgid ""
"`Definition of Haskell and the Standard Libraries "
"<http://www.haskell.org/definition/>`_"
msgstr ""

#: ../../src/PyMOTW/itertools/index.rst:575
msgid "Standard library specification for the functional language Haskell."
msgstr ""

