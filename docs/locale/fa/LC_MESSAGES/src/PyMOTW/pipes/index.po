# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/pipes/index.rst:3
msgid "pipes -- Unix shell command pipeline templates"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:8
msgid "Create repeatable Unix shell command pipelines."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:9
msgid "Python 1.4"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:11
msgid ""
"The :mod:`pipes` module implements a class to create arbitrarily complex "
"Unix command pipelines.  Inputs and outputs of the commands can be "
"chained together as with the shell ``|`` operator, even if the individual"
" commands need to write to or read from files instead of stdin/stdout."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:19
msgid "Passing Standard I/O Through a Pipe"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:21
msgid ""
"A very simple example, passing standard input through a pipe and "
"receiving the results in a file looks like this:"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:28
msgid ""
"The pipeline Template is created and then a single command, ``cat -`` is "
"added.  The command reads standard input and writes it to standard "
"output, without modification.  The second argument to ``append()`` "
"encodes the input and output sources for the command in two characters "
"(input, then output).  Using ``-`` means the command uses standard I/O.  "
"Using ``f`` means the command needs to read from a file (as may be the "
"case with an image processing pipeline)."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:36
msgid ""
"The ``debug()`` method toggles debugging output on and off.  When "
"debugging is enabled, the commands being run are printed and the shell is"
" given ``set -x`` so it runs verbosely."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:40
msgid ""
"After the pipeline is set up, a NamedTemporaryFile is created to give the"
" pipeline somewhere to write its output.  A file must always be specified"
" as argument to ``open()``, whether reading or writing."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:58
msgid ""
"Reading from a pipeline works basically the same way, with a few changes "
"to the arguments.  For our example, we need to set up the contents of the"
" input file before opening the pipline.  Then we can pass that filename "
"as input to ``open()``."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:67
msgid "We can read the results from the pipeline directly."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:84
msgid "Using Files Instead of Streams"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:86
msgid ""
"Some commands need to work on files on the filesystem instead of input "
"streams.  Commands that process a large amount of data might perform "
"better in this mode, since they will not block on the next command "
"reading their output.  Anything that works on non-stream-based data "
"requires this capability as well (e.g., databases or other binary file "
"manipulation tools).  To support this mode of operation, ``append()`` "
"lets you specify a *kind* of ``f``, and the pipeline code will create the"
" needed temporary files.  The filenames are passed to the shell as "
"``$IN`` and ``$OUT``, so those variable names need to appear in your "
"command string."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:101
msgid ""
"As you see, several intermediate temporary files are created to hold the "
"input and output of the step."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:126
msgid ""
"And the input and output *kind* values can be mixed, so that different "
"steps of the pipeline use files or standard I/O as needed."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:133
msgid ""
"The trap statements visible in the output here ensure that the temporary "
"files created by the pipeline are cleaned up even if a task fails in the "
"middle or the shell is killed."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:163
msgid "A More Complex Example"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:165
msgid ""
"All of the examples up to this point have been fairly trivial.  They were"
" constructed to illustrate how to use ``pipes.Template()`` without "
"depending on deep knowledge of shell scripting in general.  This example "
"is more complex, and shows how several commands can be combined to "
"manipulate data before bringing it into Python."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:171
msgid ""
"My `virtualenvwrapper "
"<http://www.doughellmann.com/projects/virtualenvwrapper/>`_ script "
"includes a shell function for listing all of the virtual environments you"
" have created.  The function is used for tab-completion and can be called"
" directly to list the environments, in case you forget a name. The heart "
"of that function is a small pipeline that looks in ``$WORKON_HOME`` for "
"directories that look like virtual environments (i.e., they have an "
"``activate`` script).  That pipeline is:"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:187
msgid "Implemented using :mod:`pipes`, the pipeline looks like:"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:193
msgid ""
"Since each sandbox name is written to a separate line, parsing the output"
" is easy:"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:249
msgid "Passing Files Through Pipelines"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:251
msgid ""
"If the input to your pipeline already exists in a file on disk, there's "
"no need to read it into Python simply to pass it to the pipeline.  You "
"can use the ``copy()`` method to pass the file directly through the "
"pipeline and create an output file for reading."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:280
msgid "Cloning Templates"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:282
msgid ""
"Once you have a pipeline template, you may want to use it multiple times "
"or create variants without re-constructing the entire object. The "
"``clone()`` method makes both of these operations easy.  This example "
"constructs a simple word-counter pipeline, then prepends commands to a "
"couple of clones to make it look for different words."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:292
msgid ""
"By prepending a custom command to each clone, we can create separate "
"pipelines that perform the same basic function with small variations."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:313
msgid "`pipes <http://docs.python.org/library/pipes.html>`_"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:313
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:316
msgid ":mod:`tempfile`"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:316
msgid "The tempfile module includes classes for managing temporary files."
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:319
msgid ":mod:`subprocess`"
msgstr ""

#: ../../src/PyMOTW/pipes/index.rst:319
msgid ""
"The subprocess module also supports chaining the inputs and outputs of "
"processes together."
msgstr ""

