# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/ConfigParser/index.rst:3
msgid "ConfigParser -- Work with configuration files"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:8
msgid "Read/write configuration files similar to Windows INI files"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:9
msgid "1.5"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:11
msgid ""
"Use the :mod:`ConfigParser` module to manage user-editable configuration "
"files for an application. The configuration files are organized into "
"sections, and each section can contain name-value pairs for configuration"
" data. Value interpolation using Python formatting strings is also "
"supported, to build values that depend on one another (this is especially"
" handy for URLs and message strings)."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:19
msgid "Configuration File Format"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:21
msgid ""
"The file format used by :mod:`ConfigParser` is similar to the format used"
" by older versions of Microsoft Windows.  It consists of one or more "
"named *sections*, each of which can contain individual *options* with "
"names and values."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:26
msgid ""
"Config file sections are identified by looking for lines starting with "
"``[`` and ending with ``]``.  The value between the square brackets is "
"the section name, and can contain any characters except square brackets."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:31
msgid ""
"Options are listed one per line within a section.  The line starts with "
"the name of the option, which is separated from the value by a colon "
"(``:``) or equal sign (``=``).  Whitespace around the separator is "
"ignored when the file is parsed."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:36
msgid ""
"A sample configuration file with section \"bug_tracker\" and three "
"options would look like:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:42
msgid "Reading Configuration Files"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:44
msgid ""
"The most common use for a configuration file is to have a user or system "
"administrator edit the file with a regular text editor to set application"
" behavior defaults, and then have the application read the file, parse "
"it, and act based on its contents.  Use the :func:`read` method of "
":mod:`SafeConfigParser` to read the configuration file."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:54
msgid ""
"This program reads the ``simple.ini`` file from the previous section and "
"prints the value of the :data:`url` option from the :data:`bug_tracker` "
"section."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:70
msgid ""
"The :func:`read` method also accepts a list of filenames.  Each name in "
"turn is scanned, and if the file exists it is opened and read."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:77
msgid ""
":func:`read` returns a list containing the names of the files "
"successfully loaded, so the program can discover which configuration "
"files are missing and decide whether to ignore them."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:95
msgid "Unicode Configuration Data"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:97
msgid ""
"Configuration files containing Unicode data should be opened using the "
":mod:`codecs` module to set the proper encoding value."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:100
msgid ""
"Changing the password value of the original input to contain Unicode "
"characters and saving the results in UTF-8 encoding gives:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:105
msgid ""
"The :mod:`codecs` file handle can be passed to :func:`readfp`, which uses"
" the :func:`readline` method of its argument to get lines from the file "
"and parse them."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:113
msgid ""
"The value returned by :func:`get` is a :class:`unicode` object, so in "
"order to print it safely it must be re-encoded as UTF-8."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:131
msgid "Accessing Configuration Settings"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:133
msgid ""
":class:`SafeConfigParser` includes methods for examining the structure of"
" the parsed configuration, including listing the sections and options, "
"and getting their values.  This configuration file includes two sections "
"for separate web services:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:140
msgid ""
"And this sample program exercies some of the methods for looking at the "
"configuration data, including :func:`sections`, :func:`options`, and "
":func:`items`."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:148
msgid ""
"Both :func:`sections` and :func:`options` return lists of strings, while "
":func:`items` returns a list of tuples containing the name-value pairs."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:176
msgid "Testing whether values are present"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:178
msgid ""
"To test if a section exists, use :func:`has_section`, passing the section"
" name."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:185
msgid ""
"Testing if a section exists before calling :func:`get` avoids exceptions "
"for missing data."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:202
msgid "Use :func:`has_option` to test if an option exists within a section."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:208
msgid "If the section does not exist, :func:`has_option` returns ``False``."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:234
msgid "Value Types"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:236
msgid ""
"All section and option names are treated as strings, but option values "
"can be strings, integers, floating point numbers, or booleans.  There are"
" a range of possible boolean values that are converted true or false.  "
"This example file includes one of each:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:243
msgid ""
":class:`SafeConfigParser` does not make any attempt to understand the "
"option type.  The application is expected to use the correct method to "
"fetch the value as the desired type.  :func:`get` always returns a "
"string.  Use :func:`getint` for integers, :func:`getfloat` for floating "
"point numbers, and :func:`getboolean` for boolean values."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:253
msgid "Running this program with the example input produces:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:285
msgid "Options as Flags"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:287
msgid ""
"Usually the parser requires an explicit value for each option, but with "
"the :class:`SafeConfigParser` parameter *allow_no_value* set to ``True`` "
"an option can appear by itself on a line in the input file, and be used "
"as a flag."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:296
msgid ""
"When an option has no explicit value, :func:`has_option` reports that the"
" option exists and :func:`get` returns ``None``."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:322
msgid "Modifying Settings"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:324
msgid ""
"While :class:`SafeConfigParser` is primarily intended to be configured by"
" reading settings from files, settings can also be populated by calling "
":func:`add_section` to create a new section, and :func:`set` to add or "
"change an option."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:333
msgid ""
"All options must be set as strings, even if they will be retrieved as "
"integer, float, or boolean values."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:351
msgid ""
"Sections and options can be removed from a :class:`SafeConfigParser` with"
" :func:`remove_section` and :func:`remove_option`."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:358
msgid "Removing a section deletes any options it contains."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:389
msgid "Saving Configuration Files"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:391
msgid ""
"Once a :class:`SafeConfigParser` is populated with desired data, it can "
"be saved to a file by calling the :func:`write` method.  This makes it "
"possible to provide a user interface for editing the configuration "
"settings, without having to write any code to manage the file."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:401
msgid ""
"The :func:`write` method takes a file-like object as argument.  It writes"
" the data out in the INI format so it can be parsed again by "
":class:`SafeConfigParser`."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:424
msgid "Option Search Path"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:426
msgid ""
":class:`SafeConfigParser` uses a multi-step search process when looking "
"for an option."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:429
msgid ""
"Before starting the option search, the section name is tested.  If the "
"section does not exist, and the name is not the special value "
"``DEFAULT``, then :class:`NoSectionError` is raised."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:433
msgid ""
"If the option name appears in the *vars* dictionary passed to "
":func:`get`, the value from *vars* is returned."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:435
msgid ""
"If the option name appears in the specified section, the value from that "
"section is returned."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:437
msgid ""
"If the option name appears in the ``DEFAULT`` section, that value is "
"returned."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:439
msgid ""
"If the option name appears in the *defaults* dictionary passed to the "
"constructor, that value is returned."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:442
msgid ""
"If the name is not found in any of those locations, "
":class:`NoOptionError` is raised."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:445
msgid ""
"The search path behavior can be demonstrated using this configuration "
"file:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:450
msgid "and this test program:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:456
msgid ""
"The output shows the origin for the value of each option, and illustrates"
" the way defaults from different sources override existing values."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:500
msgid "Combining Values with Interpolation"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:502
msgid ""
":class:`SafeConfigParser` provides a feature called *interpolation* that "
"can be used to combine values together.  Values containing standard "
"Python format strings trigger the interpolation feature when they are "
"retrieved with :func:`get`.  Options named within the value being fetched"
" are replaced with their values in turn, until no more substitution is "
"necessary."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:509
msgid ""
"The URL examples from earlier in this section can be rewritten to use "
"interpolation to make it easier to change only part of the value.  For "
"example, this configuration file separates the protocol, hostname, and "
"port from the URL as separate options."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:516
msgid ""
"Interpolation is performed by default each time :func:`get` is called. "
"Pass a true value in the :data:`raw` argument to retrieve the original "
"value, without interpolation."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:524
msgid ""
"Because the value is computed by :func:`get`, changing one of the "
"settings being used by the ``url`` value changes the return value."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:542
msgid "Using Defaults"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:544
msgid ""
"Values for interpolation do not need to appear in the same section as the"
" original option.  Defaults can be mixed with override values. Using this"
" config file:"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:550
msgid ""
"The ``url`` value comes from the ``DEFAULT`` section, and the "
"substitution starts by looking in ``bug_tracker`` and falling back to "
"``DEFAULT`` for pieces not found."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:558
msgid ""
"The ``hostname`` and ``port`` values come from the ``bug_tracker`` "
"section, but the ``protocol`` comes from ``DEFAULT``."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:574
msgid "Substitution Errors"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:576
msgid ""
"Substitution stops after :attr:`MAX_INTERPOLATION_DEPTH` steps to avoid "
"problems due to recursive references."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:583
msgid ""
"An :class:`InterpolationDepthError` exception is raised if there are too "
"many substitution steps."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:602
msgid ""
"Missing values result in an :class:`InterpolationMissingOptionError` "
"exception."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:609
msgid "Since no ``server`` value is defined, the ``url`` cannot be constructed."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:632
msgid "`ConfigParser <http://docs.python.org/library/configparser.html>`_"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:632
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:634
msgid ":mod:`codecs`"
msgstr ""

#: ../../src/PyMOTW/ConfigParser/index.rst:635
msgid "The codecs module is for reading and writing Unicode files."
msgstr ""

