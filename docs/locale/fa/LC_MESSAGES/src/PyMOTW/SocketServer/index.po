# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/SocketServer/index.rst:3
msgid "SocketServer -- Creating network servers."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:8
msgid "Creating network servers."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:9
msgid "1.4"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:11
msgid ""
"The :mod:`SocketServer` module is a framework for creating network "
"servers. It defines classes for handling synchronous network requests "
"(the server request handler blocks until the request is completed) over "
"TCP, UDP, Unix streams, and Unix datagrams. It also provides mix-in "
"classes for easily converting servers to use a separate thread or process"
" for each request, depending on what is most appropriate for your "
"situation."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:19
msgid ""
"Responsibility for processing a request is split between a server class "
"and a request handler class. The server deals with the communication "
"issues (listing on a socket, accepting connections, etc.) and the request"
" handler deals with the \"protocol\" issues (interpreting incoming data, "
"processing it, sending data back to the client). This division of "
"responsibility means that in many cases you can simply use one of the "
"existing server classes without any modifications, and provide a request "
"handler class for it to work with your protocol."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:30
msgid "Server Types"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:32
msgid ""
"There are five different server classes defined in :mod:`SocketServer`.  "
":class:`BaseServer` defines the API, and is not really intended to be "
"instantiated and used directly. :class:`TCPServer` uses TCP/IP sockets to"
" communicate. :class:`UDPServer` uses datagram sockets. "
":class:`UnixStreamServer` and :class:`UnixDatagramServer` use Unix-domain"
" sockets and are only available on Unix platforms."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:41
msgid "Server Objects"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:43
msgid ""
"To construct a server, pass it an address on which to listen for requests"
" and a request handler *class* (not instance). The address format depends"
" on the server type and the socket family used. Refer to the "
":mod:`socket` module documentation for details."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:48
msgid ""
"Once the server object is instantiated, use either "
":func:`handle_request()` or :func:`serve_forever()` to process requests. "
"The :func:`serve_forever()` method simply calls :func:`handle_request()` "
"in an infinite loop, so if you need to integrate the server with another "
"event loop or use :func:`select()` to monitor several sockets for "
"different servers, you could call :func:`handle_request()` on your own. "
"See the example below for more detail."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:58
msgid "Implementing a Server"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:60
msgid ""
"If you are creating a server, it is usually possible to re-use one of the"
" existing classes and simply provide a custom request handler class. If "
"that does not meet your needs, there are several methods of "
":class:`BaseServer` available to override in a subclass:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:65
msgid ""
"``verify_request(request, client_address)`` - Return True to process the "
"request or False to ignore it. You could, for example, refuse requests "
"from an IP range if you want to block certain clients from accessing the "
"server."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:70
msgid ""
"``process_request(request, client_address)`` - Typically just calls "
":func:`finish_request()` to actually do the work. It can also create a "
"separate thread or process, as the mix-in classes do (see below)."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:74
msgid ""
"``finish_request(request, client_address)`` - Creates a request handler "
"instance using the class given to the server's constructor. Calls "
":func:`handle()` on the request handler to process the request."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:80
msgid "Request Handlers"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:82
msgid ""
"Request handlers do most of the work of receiving incoming requests and "
"deciding what action to take. The handler is responsible for implementing"
" the \"protocol\" on top of the socket layer (for example, HTTP or XML-"
"RPC). The request handler reads the request from the incoming data "
"channel, processes it, and writes a response back out. There are 3 "
"methods available to be over-ridden."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:89
msgid ""
"``setup()`` - Prepare the request handler for the request. In the "
":class:`StreamRequestHandler`, for example, the :func:`setup()` method "
"creates file-like objects for reading from and writing to the socket."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:94
msgid ""
"``handle()`` - Do the real work for the request. Parse the incoming "
"request, process the data, and send a response."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:97
msgid "``finish()`` - Clean up anything created during :func:`setup()`."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:99
msgid "In many cases, you can simply provide a :func:`handle()` method."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:102
msgid "Echo Example"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:104
msgid ""
"Let's look at a simple server/request handler pair that accepts TCP "
"connectcions and echos back any data sent by the client. The only method "
"that actually needs to be provided in the sample code is "
":func:`EchoRequestHandler.handle()`, but all of the methods described "
"above are overridden to insert :mod:`logging` calls so the output of the "
"sample program illustrates the sequence of calls made."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:111
msgid ""
"The only thing left is to have simple program that creates the server, "
"runs it in a thread, and connects to it to illustrate which methods are "
"called as the data is echoed back."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:119
msgid "The output for the program should look something like this:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:155
msgid ""
"The port number used will change each time you run it, as the kernel "
"allocates an available port automatically. If you want the server to "
"listen on a specific port each time you run it, provide that number in "
"the address tuple instead of the ``0``."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:160
msgid "Here is a simpler version of the same thing, without the :mod:`logging`:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:167
msgid ""
"In this case, no special server class is required since the "
":mod:`TCPServer` handles all of the server requirements."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:184
msgid "Threading and Forking"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:186
msgid ""
"Adding threading or forking support to a server is as simple as including"
" the appropriate mix-in in the class hierarchy for the server. The mix-in"
" classes override :func:`process_request()` to start a new thread or "
"process when a request is ready to be handled, and the work is done in "
"the new child."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:192
msgid "For threads, use the :class:`ThreadingMixIn`:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:198
msgid ""
"The response from the server includes the id of the thread where the "
"request is handled:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:215
msgid "To use separate processes, use the :class:`ForkingMixIn`:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:221
msgid ""
"In this case, the process id of the child is included in the response "
"from the server:"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:243
msgid "`SocketServer <http://docs.python.org/lib/module-SocketServer.html>`_"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:243
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:247
msgid ":mod:`asyncore`"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:246
msgid ""
"Use asyncore to create asynchronous servers that do not block while "
"processing a request."
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:249
msgid ":mod:`SimpleXMLRPCServer`"
msgstr ""

#: ../../src/PyMOTW/SocketServer/index.rst:250
msgid "XML-RPC server built using :mod:`SocketServer`."
msgstr ""

