# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/multiprocessing/basics.rst:3
msgid "multiprocessing Basics"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:5
msgid ""
"The simplest way to spawn a second is to instantiate a :class:`Process` "
"object with a target function and call :func:`start` to let it begin "
"working."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:13
msgid ""
"The output includes the word \"Worker\" printed five times, although it "
"may not be entirely clean depending on the order of execution."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:33
msgid ""
"It usually more useful to be able to spawn a process with arguments to "
"tell it what work to do.  Unlike with :mod:`threading`, to pass arguments"
" to a :mod:`multiprocessing` :class:`Process` the argument must be able "
"to be serialized using :mod:`pickle`.  This example passes each worker a "
"number so the output is a little more interesting."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:43
msgid ""
"The integer argument is now included in the message printed by each "
"worker:"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:62
msgid "Importable Target Functions"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:64
msgid ""
"One difference between the :mod:`threading` and :mod:`multiprocessing` "
"examples is the extra protection for ``__main__`` used in the "
":mod:`multiprocessing` examples.  Due to the way the new processes are "
"started, the child process needs to be able to import the script "
"containing the target function.  Wrapping the main part of the "
"application in a check for ``__main__`` ensures that it is not run "
"recursively in each child as the module is imported.  Another approach is"
" to import the target function from a separate script."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:73
msgid "For example, this main program:"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:79
msgid "uses this worker function, defined in a separate module:"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:85
msgid "and produces output like the first example above:"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:104
msgid "Determining the Current Process"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:106
msgid ""
"Passing arguments to identify or name the process is cumbersome, and "
"unnecessary.  Each :class:`Process` instance has a name with a default "
"value that can be changed as the process is created. Naming processes is "
"useful for keeping track of them, especially in applications with "
"multiple types of processes running simultaneously."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:116
msgid ""
"The debug output includes the name of the current process on each line. "
"The lines with ``Process-3`` in the name column correspond to the unnamed"
" process ``worker_1``."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:139
msgid "Daemon Processes"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:141
msgid ""
"By default the main program will not exit until all of the children have "
"exited. There are times when starting a background process that runs "
"without blocking the main program from exiting is useful, such as in "
"services where there may not be an easy way to interrupt the worker, or "
"where letting it die in the middle of its work does not lose or corrupt "
"data (for example, a task that generates \"heart beats\" for a service "
"monitoring tool)."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:149
msgid ""
"To mark a process as a daemon, set its :attr:`daemon` attribute with a "
"boolean value. The default is for processes to not be daemons, so passing"
" True turns the daemon mode on."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:157
msgid ""
"The output does not include the \"Exiting\" message from the daemon "
"process, since all of the non-daemon processes (including the main "
"program) exit before the daemon process wakes up from its 2 second sleep."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:176
msgid ""
"The daemon process is terminated automatically before the main program "
"exits, to avoid leaving orphaned processes running.  You can verify this "
"by looking for the process id value printed when you run the program, and"
" then checking for that process with a command like ``ps``."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:183
msgid "Waiting for Processes"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:185
msgid ""
"To wait until a process has completed its work and exited, use the "
":func:`join` method."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:192
msgid ""
"Since the main process waits for the daemon to exit using :func:`join`, "
"the \"Exiting\" message is printed this time."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:210
msgid ""
"By default, :func:`join` blocks indefinitely. It is also possible to pass"
" a timeout argument (a float representing the number of seconds to wait "
"for the process to become inactive). If the process does not complete "
"within the timeout period, :func:`join` returns anyway."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:219
msgid ""
"Since the timeout passed is less than the amount of time the daemon "
"sleeps, the process is still \"alive\" after :func:`join` returns."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:237
msgid "Terminating Processes"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:239
msgid ""
"Although it is better to use the *poison pill* method of signaling to a "
"process that it should exit (see :ref:`multiprocessing-queues`), if a "
"process appears hung or deadlocked it can be useful to be able to kill it"
" forcibly.  Calling :func:`terminate` on a process object kills the child"
" process."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:251
msgid ""
"It is important to :func:`join` the process after terminating it in order"
" to give the background machinery time to update the status of the object"
" to reflect the termination."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:272
msgid "Process Exit Status"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:274
msgid ""
"The status code produced when the process exits can be accessed via the "
":attr:`exitcode` attribute."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:277
msgid "For :attr:`exitcode` values"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:279
msgid "``== 0`` -- no error was produced"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:280
msgid "``> 0`` -- the process had an error, and exited with that code"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:281
msgid "``< 0`` -- the process was killed with a signal of ``-1 * exitcode``"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:287
msgid ""
"Processes that raise an exception automatically get an :attr:`exitcode` "
"of 1."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:324
msgid "Logging"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:326
msgid ""
"When debugging concurrency issues, it can be useful to have access to the"
" internals of the objects provided by :mod:`multiprocessing`. There is a "
"convenient module-level function to enable logging called "
":func:`log_to_stderr`.  It sets up a logger object using :mod:`logging` "
"and adds a handler so that log messages are sent to the standard error "
"channel."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:337
msgid ""
"By default the logging level is set to ``NOTSET`` so no messages are "
"produced.  Pass a different level to initialize the logger to the level "
"of detail you want."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:361
msgid ""
"To manipulate the logger directly (change its level setting or add "
"handlers), use :func:`get_logger`."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:368
msgid ""
"The logger can also be configured through the :mod:`logging` "
"configuration file API, using the name ``multiprocessing``."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:389
msgid "Subclassing Process"
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:391
msgid ""
"Although the simplest way to start a job in a separate process is to use "
":class:`Process` and pass a target function, it is also possible to use a"
" custom subclass."
msgstr ""

#: ../../src/PyMOTW/multiprocessing/basics.rst:399
msgid "The derived class should override :meth:`run` to do its work."
msgstr ""

