# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/unittest/index.rst:3
msgid "unittest -- Automated testing framework"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:8
msgid "Automated testing framework"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:9
msgid "2.1"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:11
msgid ""
"Python's :mod:`unittest` module, sometimes referred to as PyUnit, is "
"based on the XUnit framework design by Kent Beck and Erich Gamma. The "
"same pattern is repeated in many other languages, including C, perl, "
"Java, and Smalltalk. The framework implemented by :mod:`unittest` "
"supports fixtures, test suites, and a test runner to enable automated "
"testing for your code."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:19
msgid "Basic Test Structure"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:21
msgid ""
"Tests, as defined by :mod:`unittest`, have two parts: code to manage test"
" \"fixtures\", and the test itself. Individual tests are created by "
"subclassing :class:`TestCase` and overriding or adding appropriate "
"methods. For example,"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:30
msgid ""
"In this case, the :class:`SimplisticTest` has a single :func:`test()` "
"method, which would fail if True is ever False."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:34
msgid "Running Tests"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:36
msgid "The easiest way to run unittest tests is to include:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:43
msgid ""
"at the bottom of each test file, then simply run the script directly from"
" the command line:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:62
msgid ""
"This abbreviated output includes the amount of time the tests took, along"
" with a status indicator for each test (the \".\" on the first line of "
"output means that a test passed). For more detailed test results, include"
" the -v option:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:84
msgid "Test Outcomes"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:86
msgid "Tests have 3 possible outcomes:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:89
msgid "ok"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:89
msgid "The test passes."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:92
msgid "FAIL"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:92
msgid "The test does not pass, and raises an AssertionError exception."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:95
msgid "ERROR"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:95
msgid "The test raises an exception other than AssertionError."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:97
msgid ""
"There is no explicit way to cause a test to \"pass\", so a test's status "
"depends on the presence (or absence) of an exception."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:104
msgid ""
"When a test fails or generates an error, the traceback is included in the"
" output."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:140
msgid ""
"In the example above, :func:`testFail()` fails and the traceback shows "
"the line with the failure code. It is up to the person reading the test "
"output to look at the code to figure out the semantic meaning of the "
"failed test, though. To make it easier to understand the nature of a test"
" failure, the :func:`fail*()` and :func:`assert*()` methods all accept an"
" argument *msg*, which can be used to produce a more detailed error "
"message."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:179
msgid "Asserting Truth"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:181
msgid ""
"Most tests assert the truth of some condition. There are a few different "
"ways to write truth-checking tests, depending on the perspective of the "
"test author and the desired outcome of the code being tested. If the code"
" produces a value which can be evaluated as true, the methods "
":func:`failUnless()` and :func:`assertTrue()` should be used. If the code"
" produces a false value, the methods :func:`failIf()` and "
":func:`assertFalse()` make more sense."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:215
msgid "Testing Equality"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:217
msgid ""
"As a special case, :mod:`unittest` includes methods for testing the "
"equality of two values."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:243
msgid ""
"These special tests are handy, since the values being compared appear in "
"the failure message when a test fails."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:251
msgid "And when these tests are run:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:289
msgid "Almost Equal?"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:291
msgid ""
"In addition to strict equality, it is possible to test for near equality "
"of floating point numbers using :func:`failIfAlmostEqual()` and "
":func:`failUnlessAlmostEqual()`."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:299
msgid ""
"The arguments are the values to be compared, and the number of decimal "
"places to use for the test."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:319
msgid "Testing for Exceptions"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:321
msgid ""
"As previously mentioned, if a test raises an exception other than "
":ref:`AssertionError <exceptions-AssertionError>` it is treated as an "
"error. This is very useful for uncovering mistakes while you are "
"modifying code which has existing test coverage. There are circumstances,"
" however, in which you want the test to verify that some code does "
"produce an exception. For example, if an invalid value is given to an "
"attribute of an object. In such cases, :func:`failUnlessRaises()` makes "
"the code more clear than trapping the exception yourself. Compare these "
"two tests:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:335
msgid ""
"The results for both are the same, but the second test using "
":func:`failUnlessRaises()` is more succinct."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:360
msgid "Test Fixtures"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:362
msgid ""
"Fixtures are resources needed by a test. For example, if you are writing "
"several tests for the same class, those tests all need an instance of "
"that class to use for testing. Other test fixtures include database "
"connections and temporary files (many people would argue that using "
"external resources makes such tests not \"unit\" tests, but they are "
"still tests and still useful).  :class:`TestCase` includes a special hook"
" to configure and clean up any fixtures needed by your tests. To "
"configure the fixtures, override :func:`setUp()`. To clean up, override "
":func:`tearDown()`."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:376
msgid ""
"When this sample test is run, you can see the order of execution of the "
"fixture and test methods:"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:400
msgid "Test Suites"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:402
msgid ""
"The standard library documentation describes how to organize test suites "
"manually. I generally do not use test suites directly, because I prefer "
"to build the suites automatically (these are automated tests, after all)."
"  Automating the construction of test suites is especially useful for "
"large code bases, in which related tests are not all in the same place. "
"Tools such as nose make it easier to manage tests when they are spread "
"over multiple files and directories."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:413
msgid "`unittest <http://docs.python.org/lib/module-unittest.html>`_"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:413
msgid "Standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:417
msgid ":mod:`doctest`"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:416
msgid ""
"An alternate means of running tests embedded in docstrings or external "
"documentation files."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:420
msgid "`nose <http://somethingaboutorange.com/mrl/projects/nose/>`_"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:420
msgid "A more sophisticated test manager."
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:422
msgid "`unittest2 <http://pypi.python.org/pypi/unittest2>`_"
msgstr ""

#: ../../src/PyMOTW/unittest/index.rst:423
msgid "Ongoing improvements to :mod:`unittest`"
msgstr ""

