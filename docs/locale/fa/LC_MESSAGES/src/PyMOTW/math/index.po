# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Python-ir.org
# This file is distributed under the same license as the Python-ir package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python-ir 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-07 20:31+0430\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../src/PyMOTW/math/index.rst:3
msgid "math -- Mathematical functions"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:8
msgid "Provides functions for specialized mathematical operations."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:9
msgid "1.4"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:11
msgid ""
"The :mod:`math` module implements many of the IEEE functions that would "
"normally be found in the native platform C libraries for complex "
"mathematical operations using floating point values, including logarithms"
" and trigonometric operations."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:17
msgid "Special Constants"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:19
msgid ""
"Many math operations depend on special constants.  :mod:`math` includes "
"values for Ï€ (pi) and e."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:26
msgid ""
"Both values are limited in precision only by the platform's floating "
"point C library."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:43
msgid "Testing for Exceptional Values"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:45
msgid ""
"Floating point calculations can result in two types of exceptional "
"values.  ``INF`` (\"infinity\") appears when the *double* used to hold a "
"floating point value overflows from a value with a large absolute value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:54
msgid ""
"When the exponent in this example grows large enough, the square of *x* "
"no longer fits inside a *double*, and the value is recorded as infinite."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:82
msgid ""
"Not all floating point overflows result in ``INF`` values, however. "
"Calculating an exponent with floating point values, in particular, raises"
" :ref:`OverflowError <exceptions-OverflowError>` instead of preserving "
"the ``INF`` result."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:91
msgid ""
"This discrepancy is caused by an implementation difference in the library"
" used by C Python."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:108
msgid ""
"Division operations using infinite values are undefined.  The result of "
"dividing a number by infinity is ``NaN`` (\"not a number\")."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:115
msgid ""
"``NaN`` does not compare as equal to any value, even itself, so to check "
"for ``NaN`` you must use :func:`isnan`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:135
msgid "Converting to Integers"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:137
msgid ""
"The :mod:`math` module includes three functions for converting floating "
"point values to whole numbers.  Each takes a different approach, and will"
" be useful in different circumstances."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:141
msgid ""
"The simplest is :func:`trunc`, which truncates the digits following the "
"decimal, leaving only the significant digits making up the whole number "
"portion of the value.  :func:`floor` converts its input to the largest "
"preceding integer, and :func:`ceil` (ceiling) produces the largest "
"integer following sequentially after the input value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:151
msgid ":func:`trunc` is equivalent to converting to :class:`int` directly."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:176
msgid "Alternate Representations"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:178
msgid ""
":func:`modf` takes a single floating point number and returns a tuple "
"containing the fractional and whole number parts of the input value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:185
msgid "Both numbers in the return value are floats."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:204
msgid ""
":func:`frexp` returns the mantissa and exponent of a floating point "
"number, and can be used to create a more portable representation of the "
"value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:212
msgid ""
":func:`frexp` uses the formula ``x = m * 2**e``, and returns the values "
"*m* and *e*."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:231
msgid ":func:`ldexp` is the inverse of :func:`frexp`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:237
msgid ""
"Using the same formula as :func:`frexp`, :func:`ldexp` takes the mantissa"
" and exponent values as arguments and returns a floating point number."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:259
msgid "Positive and Negative Signs"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:261
msgid ""
"The absolute value of number is its value without a sign.  Use "
":func:`fabs` to calculate the absolute value of a floating point number."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:269
msgid ""
"In practical terms, the absolute value of a :class:`float` is represented"
" as a positive value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:287
msgid ""
"To determine the sign of a value, either to give a set of values the same"
" sign or simply for comparison, use :func:`copysign` to set the sign of a"
" known good value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:295
msgid ""
"An extra function like :func:`copysign` is needed because comparing NaN "
"and -NaN directly with other values does not work."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:320
msgid "Commonly Used Calculations"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:322
msgid ""
"Representing precise values in binary floating point memory is "
"challenging.  Some values cannot be represented exactly, and the more "
"often a value is manipulated through repeated calculations, the more "
"likely a representation error will be introduced.  :mod:`math` includes a"
" function for computing the sum of a series of floating point numbers "
"using an efficient algorithm that minimize such errors."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:333
msgid ""
"Given a sequence of ten values each equal to ``0.1``, the expected value "
"for the sum of the sequence is ``1.0``.  Since ``0.1`` cannot be "
"represented exactly as a floating point value, however, errors are "
"introduced into the sum unless it is calculated with :func:`fsum`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:353
msgid ""
":func:`factorial` is commonly used to calculate the number of "
"permutations and combinations of a series of objects.  The factorial of a"
" positive integer *n*, expressed ``n!``, is defined recursively as "
"``(n-1)! * n`` and stops with ``0! == 1``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:362
msgid ""
":func:`factorial` only works with whole numbers, but does accept "
":class:`float` arguments as long as they can be converted to an integer "
"without losing value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:384
msgid ""
":func:`gamma` is like :func:`factorial`, except it works with real "
"numbers and the value is shifted down one (gamma is equal to ``(n - "
"1)!``)."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:392
msgid "Since zero causes the start value to be negative, it is not allowed."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:412
msgid ""
":func:`lgamma` returns the natural logarithm of the absolute value of "
"Gamma for the input value."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:419
msgid ""
"Using :func:`lgamma` retains more precision than calculating the "
"logarithm separately using the results of :func:`gamma`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:440
msgid ""
"The modulo operator (``%``) computes the remainder of a division "
"expression (i.e., ``5 % 2 = 1``).  The operator built into the language "
"works well with integers but, as with so many other floating point "
"operations, intermediate calculations cause representational issues that "
"result in a loss of data.  :func:`fmod` provides a more accurate "
"implementation for floating point values."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:451
msgid ""
"A potentially more frequent source of confusion is the fact that the "
"algorithm used by :mod:`fmod` for computing modulo is also different from"
" that used by ``%``, so the sign of the result is different. mixed-sign "
"inputs."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:473
msgid "Exponents and Logarithms"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:475
msgid ""
"Exponential growth curves appear in economics, physics, and other "
"sciences.  Python has a built-in exponentiation operator (\"``**``\"), "
"but :func:`pow` can be useful when you need to pass a callable function "
"as an argument."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:484
msgid ""
"Raising ``1`` to any power always returns ``1.0``, as does raising any "
"value to a power of ``0.0``.  Most operations on the not-a-number value "
"``nan`` return ``nan``.  If the exponent is less than ``1``, :func:`pow` "
"computes a root."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:507
msgid ""
"Since square roots (exponent of ``1/2``) are used so frequently, there is"
" a separate function for computing them."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:514
msgid ""
"Computing the square roots of negative numbers requires *complex "
"numbers*, which are not handled by :mod:`math`.  Any attempt to calculate"
" a square root of a negative value results in a :ref:`ValueError "
"<exceptions-ValueError>`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:533
msgid ""
"The logarithm function finds *y* where ``x = b ** y``.  By default, "
":func:`log` computes the natural logarithm (the base is *e*).  If a "
"second argument is provided, that value is used as the base."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:541
msgid "Logarithms where *x* is less than one yield negative results."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:557
msgid ""
"There are two variations of :func:`log`.  Given floating point "
"representation and rounding errors the computed value produced by "
"``log(x, b)`` has limited accuracy, especially for some bases. "
":func:`log10` computes ``log(x, 10)``, using a more accurate algorithm "
"than :func:`log`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:567
msgid ""
"The lines in the output with trailing ``*`` highlight the inaccurate "
"values."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:593
msgid ""
":func:`log1p` calculates the Newton-Mercator series (the natural "
"logarithm of ``1+x``)."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:600
msgid ""
":func:`log1p` is more accurate for values of *x* very close to zero "
"because it uses an algorithm that compensates for round-off errors from "
"the initial addition."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:619
msgid ":func:`exp` computes the exponential function (``e**x``)."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:625
msgid ""
"As with other special-case functions, it uses an algorithm that produces "
"more accurate results than the general-purpose equivalent "
"``math.pow(math.e, x)``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:643
msgid ""
":func:`expm1` is the inverse of :func:`log1p`, and calculates ``e**x - "
"1``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:650
msgid ""
"As with :func:`log1p`, small values of *x* lose precision when the "
"subtraction is performed separately."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:668
msgid "Angles"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:670
msgid ""
"Although degrees are more commonly used in everyday discussions of "
"angles, radians are the standard unit of angular measure in science and "
"math.  A radian is the angle created by two lines intersecting at the "
"center of a circle, with their ends on the circumference of the circle "
"spaced one radius apart."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:676
msgid ""
"The circumference is calculated as ``2Ï€r``, so there is a relationship "
"between radians and Ï€, a value that shows up frequently in trigonometric "
"calculations.  That relationship leads to radians being used in "
"trigonometry and calculus, because they result in more compact formulas."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:682
msgid "To convert from degrees to radians, use :func:`radians`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:688
msgid "The formula for the conversion is ``rad = deg * Ï€ / 180``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:711
msgid "To convert from radians to degrees, use :func:`degrees`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:717
msgid "The formula is ``deg = rad * 180 / Ï€``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:742
msgid "Trigonometry"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:744
msgid ""
"Trigonometric functions relate angles in a triangle to the lengths of its"
" sides.  They show up in formulas with periodic properties such as "
"harmonics, circular motion, or when dealing with angles."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:750
msgid ""
"All of the trigonometric functions in the standard library take angles "
"expressed as radians."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:753
msgid ""
"Given an angle in a right triangle, the *sine* is the ratio of the length"
" of the side opposite the angle to the hypotenuse (``sin A = "
"opposite/hypotenuse``).  The *cosine* is the ratio of the length of the "
"adjacent side to the hypotenuse (``cos A = adjacent/hypotenuse``). And "
"the *tangent* is the ratio of the opposite side to the adjacent side "
"(``tan A = opposite/adjacent``)."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:764
msgid ""
"The tangent can also be defined as the ratio of the sine of the angle to "
"its cosine, and since the cosine is 0 for Ï€/2 and 3Ï€/2 radians, the "
"tangent is infinite."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:794
msgid ""
"Given a point (*x*, *y*), the length of the hypotenuse for the triangle "
"between the points [(0, 0), (*x*, 0), (*x*, *y*)] is ``(x**2 + y**2) ** "
"1/2``, and can be computed with :func:`hypot`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:802
msgid "Points on the circle always have hypotenuse == ``1``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:823
msgid "The same function can be used to find the distance between two points."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:829
msgid ""
"Use the difference in the *x* and *y* values to move one endpoint to the "
"origin, and then pass the results to :func:`hypot`."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:849
msgid ":mod:`math` also defines inverse trigonometric functions."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:855
msgid ""
"``1.57`` is roughly equal to ``Ï€/2``, or 90 degrees, the angle at which "
"the sine is 1 and the cosine is 0."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:884
msgid "Hyperbolic Functions"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:886
msgid ""
"Hyperbolic functions appear in linear differential equations and are used"
" when working with electromagnetic fields, fluid dynamics, special "
"relativity, and other advanced physics and mathematics."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:894
msgid ""
"Whereas the cosine and sine functions enscribe a circle, the hyperbolic "
"cosine and hyperbolic sine form half of a hyperbola."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:916
msgid ""
"Inverse hyperbolic functions :func:`acosh`, :func:`asinh`, and "
":func:`atanh` are also available."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:920
msgid "Special Functions"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:922
msgid "The Gauss Error function is used in statistics."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:928
msgid "Notice that ``erf(-x) == -erf(x)``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:954
msgid "The complimentary error function is ``1 - erf(x)``."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:988
msgid "`math <http://docs.python.org/library/math.html>`_"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:988
msgid "The standard library documentation for this module."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:992
msgid ""
"`IEEE floating point arithmetic in Python "
"<http://www.johndcook.com/blog/2009/07/21/ieee-arithmetic-python/>`__"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:991
msgid ""
"Blog post by John Cook about how special values arise and are dealt with "
"when doing math in Python."
msgstr ""

#: ../../src/PyMOTW/math/index.rst:995
msgid "`SciPy <http://scipy.org/>`_"
msgstr ""

#: ../../src/PyMOTW/math/index.rst:995
msgid ""
"Open source libraryes for scientific and mathematical calculations in "
"Python."
msgstr ""

